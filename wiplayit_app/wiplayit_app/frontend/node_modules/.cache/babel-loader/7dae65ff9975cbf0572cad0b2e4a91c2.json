{"ast":null,"code":"import { ModalManager } from 'react-dynamic-modal';\nimport { convertToRaw } from 'draft-js';\nexport default class Helper {\n  downVote(self, context) {\n    let upvotes = context.obj.upvotes - 1;\n    var formData = this.createFormData({\n      upvotes\n    });\n    return formData;\n  }\n\n  upVote(self, context) {\n    let upvotes = context.obj.upvotes + 1;\n    context['formData'] = this.createFormData({\n      upvotes\n    });\n    return this.sendRequest(self, context);\n  }\n\n  unFollow(self, context) {\n    let followers = context.obj.followers - 1;\n    context['formData'] = this.createFormData({\n      followers\n    });\n    this.sendRequest(self, context);\n  }\n\n  follow(self, context) {\n    let followers = context.obj.followers + 1;\n    context['formData'] = this.createFormData({\n      followers\n    });\n    this.sendRequest(self, context);\n  }\n\n  updateState(context) {\n    let listItems = context.listItems;\n    console.log(listItems, context);\n    listItems.map((item, index) => {\n      if (index === context.objIndex) {\n        listItems[index] = context.response;\n      }\n\n      return {\n        listItems\n      };\n    });\n    return listItems;\n  }\n\n  createFormData(data) {\n    var formData = new FormData();\n\n    for (var key in data) {\n      formData.append(key, data[key]);\n    }\n\n    return formData;\n  }\n\n  blockText(form) {\n    let blocks = form.blocks;\n    let blockText = \"\";\n\n    for (var i = blocks.length - 1; i >= 0; i--) {\n      console.log(blocks[i].text);\n      let text = blocks[i].text;\n\n      if (!/^ *$/.test(text)) {\n        console.log(text);\n        blockText = text;\n      } else {\n        console.log(blocks[i].text);\n        blockText = \"\";\n      }\n    }\n\n    return blockText;\n  }\n\n  validateForm(params) {\n    let validatedForm = {};\n    console.log(params.form);\n\n    if (params.editorContents) {\n      let form = convertToRaw(params.editorContents);\n      let entityMap = Object.keys(form.entityMap);\n      let blockText = this.blockText(form);\n\n      if (blockText !== \"\" || entityMap.length) {\n        validatedForm = {\n          data: JSON.stringify(form),\n          formIsValid: true\n        };\n      } else {\n        validatedForm = {\n          formHasErrors: true,\n          formIsValid: false,\n          errors: \"Form is Empty\"\n        };\n      }\n    } else if (params.form) {\n      let textarea = params.form.textarea;\n\n      if (/^ *$/.test(textarea)) {\n        //If textarea field is empty? Return form errors\n        validatedForm = {\n          formHasErrors: true,\n          formIsValid: false,\n          errors: \"Form is Empty\"\n        };\n      } else {\n        validatedForm = {\n          data: params.form.textarea,\n          formIsValid: true,\n          formHasErrors: false\n        };\n      }\n    }\n\n    return validatedForm;\n  }\n\n  handeGetResponse(self, context) {\n    console.log(context);\n    let state = context.state; //console.log(state)\n\n    if (context.objName === \"user\") {\n      let error = \"No Upvoter Yet\";\n\n      if (context.followers) {\n        error = 'No Followers Yet';\n      } else if (context.followings) {\n        error = 'No Followings Yet';\n      } else if (context.isUserList) {\n        error = 'No Followings Yet';\n      }\n\n      state['error'] = error; //state['userList'] = context.response;\n      //state['showAjaxLoader']     = false;\n\n      self.setState({\n        showSpinLoader: false,\n        userList: context.response\n      });\n    } else if (context.objName === \"reply\") {\n      state['showAjaxLoader'] = false;\n      state['haveReplies'] = true;\n      state['replyList'] = context.response;\n      self.setState({\n        state\n      });\n    } else if (context.objName === \"comment\") {\n      state['showAjaxLoader'] = false;\n      state['haveComments'] = true;\n      state['commentList'] = context.response;\n      self.setState({\n        state\n      });\n    } //self.setState({showSpinLoader: false})\n\n  }\n\n  handePutResponse(self, context) {\n    console.log(context);\n    let state = context.state;\n    let currentUser = self.state.currentUser;\n\n    if (context.objName === \"question\") {\n      //Update Question Component state\n      let question = context.response;\n      self.setState({\n        question\n      });\n    } else if (context.objName === \"post\") {\n      let post = context.response;\n      self.setState({\n        post\n      });\n    } else if (context.objName === \"answer\") {\n      console.log(self);\n      let state = self.state;\n\n      if (state.isQuestionBox) {\n        currentUser = self.props.currentUser;\n        let answer = context.response;\n        console.log(context);\n        self.props.history.push(\"/\".concat(context.slug, \"/answer/\"), {\n          answer,\n          currentUser\n        });\n      } else {\n        context['listItems'] = state.answerList;\n        let modifiedList = this.updateState(context);\n        self.setState({\n          answerList: modifiedList\n        });\n      }\n    } else if (context.objName === \"reply\") {\n      context['listItems'] = state.replyList;\n      let modifiedList = this.updateState(context);\n      state['replyList'] = modifiedList;\n      self.setState({\n        state\n      });\n    } else if (context.objName === \"comment\") {\n      context['listItems'] = self.state.commentList;\n      let modifiedList = this.updateState(context);\n      self.setState({\n        commentList: modifiedList\n      });\n    } else if (context.objName === \"user\") {\n      if (context.isUserList) {\n        context['listItems'] = self.state.userList;\n        let modifiedList = this.updateState(context);\n        self.setState({\n          userList: modifiedList\n        });\n      }\n    } else if (context.objName === \"userProfile\") {\n      let userProfile = self.state.userProfile;\n\n      if (context.followers || context.followings) {\n        userProfile.user_is_following = context.response.user_is_following;\n        self.setState({\n          userProfile: userProfile\n        });\n      } else {\n        self.setState({\n          userProfile: context.response\n        });\n      }\n    } //self.setState({showSpinLoader: false})\n\n  }\n\n  handePostResponse(self, context) {\n    console.log(context);\n    let currentUser = self.state.currentUser;\n\n    if (context.objName === \"question\") {\n      //Update Question Component state\n      let question = context.response;\n      self.props.history.push(\"/question/\".concat(question.slug, \"/\"), {\n        question,\n        currentUser\n      });\n    } else if (context.objName === \"post\") {\n      let post = context.response;\n      self.props.history.push(\"/post/\".concat(post.slug, \"/\"), {\n        post,\n        currentUser\n      });\n    } else if (context.objName === \"answer\") {\n      if (context.isNewComment) {\n        self.setState({\n          newComment: context.response\n        });\n      } else {\n        let answer = context.response;\n        console.log(context);\n        self.props.history.push(\"\".concat(context.slug, \"/answer/\"), {\n          answer,\n          currentUser\n        });\n      }\n    } else if (context.objName === \"comment\") {\n      if (context.isNewReply) {\n        self.setState({\n          newReply: context.response\n        });\n      }\n    } else if (context.objName === \"reply\") {\n      if (context.isNewReply) {\n        context.state['haveReplies'] = true;\n        context.state.replyList.unshift(context.response);\n      }\n    }\n\n    self.setState({\n      showSpinLoader: false\n    }); //ModalManager.close();\n  }\n\n  sendRequest(self, context) {\n    let instance = axiosApi.axiosInstance(); //let state = {}\n\n    if (context.isGet) {\n      instance.get(context.apiUrl).then(response => {\n        console.log(response.data);\n        context['response'] = response.data;\n        this.handeGetResponse(self, context);\n        ModalManager.close();\n        return Promise.resolve(response);\n      }).catch(error => {}); //Closes axios instance request\n    } else if (context.isPut) {\n      instance.put(context.apiUrl, context.formData).then(response => {\n        context['response'] = response.data;\n        this.handePutResponse(self, context);\n        ModalManager.close();\n        return Promise.resolve(response);\n      }).catch(error => {\n        if (error.request) {\n          context['errorRequest'] = error.request; //this.handleErrors(response.data, context)\n        } else if (error.response) {\n          context['errorResponse'] = error.response; //this.handleErrors(response.data, context)\n        }\n      });\n    } else if (context.isPost) {\n      instance.post(context.apiUrl, context.formData).then(response => {\n        context['response'] = response.data;\n        this.handePostResponse(self, context);\n        ModalManager.close();\n        return Promise.resolve(response);\n      }).catch(error => {\n        if (error.request) {\n          console.log(error.request);\n          context['errorRequest'] = error.request; //this.handleErrors(response.data, context)\n        } else if (error.response) {\n          console.log(error.response);\n          context['errorResponse'] = error.response; //this.handleErrors(response.data, context)\n        }\n      });\n    }\n  }\n\n}\n;","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/utils/helpers.js"],"names":["ModalManager","convertToRaw","Helper","downVote","self","context","upvotes","obj","formData","createFormData","upVote","sendRequest","unFollow","followers","follow","updateState","listItems","console","log","map","item","index","objIndex","response","data","FormData","key","append","blockText","form","blocks","i","length","text","test","validateForm","params","validatedForm","editorContents","entityMap","Object","keys","JSON","stringify","formIsValid","formHasErrors","errors","textarea","handeGetResponse","state","objName","error","followings","isUserList","setState","showSpinLoader","userList","handePutResponse","currentUser","question","post","isQuestionBox","props","answer","history","push","slug","answerList","modifiedList","replyList","commentList","userProfile","user_is_following","handePostResponse","isNewComment","newComment","isNewReply","newReply","unshift","instance","axiosApi","axiosInstance","isGet","get","apiUrl","then","close","Promise","resolve","catch","isPut","put","request","isPost"],"mappings":"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","sourcesContent":["\nimport { ModalManager} from 'react-dynamic-modal';\nimport {convertToRaw} from 'draft-js';\n\n\n\nexport default class Helper {\n\n   downVote(self,context ) {\n      let upvotes     =   context.obj.upvotes  - 1;\n      var formData    =   this.createFormData({upvotes});\n      return formData;\n   }\n\n\n   upVote(self , context ) {\n      let upvotes         =   context.obj.upvotes + 1;\n      context['formData'] =  this.createFormData({upvotes});\n      return this.sendRequest(self, context);\n   }\n\n\n   unFollow(self, context) {\n      let followers       =  context.obj.followers - 1;\n      context['formData'] =  this.createFormData({followers});\n      this.sendRequest(self, context); \n   }\n\n\n   follow(self,context) {\n      let followers = context.obj.followers + 1;\n      context['formData'] =  this.createFormData({followers});\n      this.sendRequest(self, context); \n   }\n\n\n\n   updateState(context) {\n      let listItems = context.listItems;\n\n      console.log(listItems, context)\n      listItems.map(( item, index) => {\n         if (index  === context.objIndex) {\n            listItems[index] = context.response;\n         }\n      \n         return {\n            listItems,\n         }\n\n      });\n\n      return listItems;\n   }\n      \n   createFormData(data ) {\n      var formData    =   new FormData();\n      \n      for (var key in data){\n         formData.append(key, data[key]);\n      }\n\n      return formData;\n   }\n\n   blockText(form) {\n      let blocks    =  form.blocks;\n      let blockText     =  \"\";          \n      for (var i = blocks.length - 1; i >= 0; i--) {\n         console.log(blocks[i].text)\n         let text = blocks[i].text;\n         if (! /^ *$/.test(text)) {\n                  console.log(text)\n                  blockText = text;  \n         } else{\n            console.log(blocks[i].text)\n            blockText = \"\";\n         }\n      }\n      return blockText;\n   };\n\n   validateForm(params){\n      let validatedForm = {};\n      console.log(params.form)\n      if (params.editorContents) {\n         let form      = convertToRaw(params.editorContents);\n         let entityMap = Object.keys(form.entityMap);\n         let blockText =   this.blockText(form);\n                  \n         if (blockText !== \"\" || entityMap.length) {\n            validatedForm = {data: JSON.stringify(form),formIsValid : true,}\n         }\n         else{\n            validatedForm = {\n               formHasErrors : true,\n               formIsValid   : false,\n               errors        : \"Form is Empty\",\n            }\n         } \n      }\n      else if(params.form){\n         let textarea = params.form.textarea;\n         if (/^ *$/.test(textarea)) {\n            //If textarea field is empty? Return form errors\n            validatedForm = {\n               formHasErrors : true,\n               formIsValid   : false,\n               errors        : \"Form is Empty\",\n            }\n         }\n         else{\n            validatedForm = {\n               data          : params.form.textarea,\n               formIsValid   : true,\n               formHasErrors : false\n            }\n         }\n      }\n\n      return validatedForm; \n   }\n\n   handeGetResponse(self, context){\n      console.log(context)\n      let state = context.state; \n      //console.log(state)\n      if (context.objName === \"user\") {\n         \n        let error = \"No Upvoter Yet\";\n         if (context.followers) {\n               error =  'No Followers Yet';\n         }else if(context.followings){\n            error =  'No Followings Yet';\n         }\n\n         else if(context.isUserList) {\n            error =  'No Followings Yet';\n         }\n\n         state['error'] = error;\n         //state['userList'] = context.response;\n         //state['showAjaxLoader']     = false;\n         self.setState({showSpinLoader:false, userList: context.response,})\n      }\n\n      else if (context.objName === \"reply\") {\n         state['showAjaxLoader']      = false;\n         state['haveReplies']         = true; \n         state['replyList']           = context.response;\n         self.setState({ state });\n      }\n\n      else if (context.objName === \"comment\") {\n         state['showAjaxLoader']     = false;\n         state['haveComments']       = true; \n         state['commentList']        = context.response;\n\n         self.setState({ state });\n      }\n      \n      //self.setState({showSpinLoader: false})\n   }\n\n\n   handePutResponse(self, context){\n     console.log(context)\n     let state = context.state; \n     let currentUser = self.state.currentUser;\n     if(context.objName === \"question\")  {\n         //Update Question Component state\n         let question  =  context.response;\n         self.setState({question});\n\n      }\n      else if(context.objName === \"post\"){\n         let post  =  context.response;\n         self.setState({post})\n\n      }\n      \n      else if (context.objName === \"answer\") {\n         console.log(self)\n         let state = self.state;\n         if (state.isQuestionBox) {\n            currentUser = self.props.currentUser;\n            let answer  =  context.response;\n            console.log(context)\n            self.props.history.push(`/${context.slug}/answer/`, {answer, currentUser});\n            \n         }else{\n            context['listItems']     = state.answerList;\n            let modifiedList = this.updateState(context);\n            self.setState({ answerList  : modifiedList})\n         }\n      }\n\n      else if (context.objName === \"reply\") {\n         context['listItems'] = state.replyList;\n         let modifiedList     = this.updateState(context);\n         state['replyList']   = modifiedList;\n         self.setState({ state });\n      }\n\n\n      else if (context.objName === \"comment\") {\n         context['listItems'] = self.state.commentList;\n         let modifiedList     = this.updateState(context);\n         self.setState({ commentList  : modifiedList});\n      }\n\n      else if(context.objName === \"user\"){\n        if (context.isUserList) {\n            context['listItems'] = self.state.userList;\n            let modifiedList = this.updateState(context);\n            self.setState({userList: modifiedList})\n         }\n      }\n      else if (context.objName === \"userProfile\") {\n         let userProfile = self.state.userProfile;\n         if (context.followers || context.followings){\n            userProfile.user_is_following = context.response.user_is_following\n            self.setState({ userProfile: userProfile })\n         }else{\n            self.setState({userProfile:context.response})\n         }\n      }\n\n      //self.setState({showSpinLoader: false})\n      \n   }\n\n\n\n   handePostResponse(self, context){\n      console.log(context)\n      let currentUser = self.state.currentUser;\n\n      if(context.objName === \"question\")  {\n         //Update Question Component state\n         let question  =  context.response;\n         self.props.history.push(`/question/${question.slug}/`,{question, currentUser});\n      }\n      else if(context.objName === \"post\"){\n         let post  =  context.response;\n         self.props.history.push(`/post/${post.slug}/`,{post, currentUser});\n      }\n      else if (context.objName === \"answer\") {\n         if (context.isNewComment) {\n            self.setState({ newComment  : context.response});\n\n         }\n         else {\n            let answer  =  context.response;\n            console.log(context)\n            self.props.history.push(`${context.slug}/answer/`, {answer, currentUser});\n         }\n         \n      }\n\n      else if (context.objName === \"comment\") {\n         if(context.isNewReply){\n            self.setState({newReply  : context.response});\n         }\n      }\n\n      else if (context.objName === \"reply\") {\n         if (context.isNewReply) {\n            context.state['haveReplies'] = true;\n            context.state.replyList.unshift(context.response)\n         }      \n      }\n   \n      self.setState({showSpinLoader: false});\n      //ModalManager.close();\n\n   }\n\n   sendRequest(self,context ) {\n      let instance = axiosApi.axiosInstance();  \n      //let state = {}\n      if (context.isGet) {\n         instance.get(context.apiUrl)\n         .then(response => {\n            console.log(response.data)   \n            context['response'] = response.data;\n            this.handeGetResponse(self, context);\n            ModalManager.close();\n            return Promise.resolve(response);\n         })\n         .catch(error => {\n\n         });//Closes axios instance request\n\n      }\n\n      else if(context.isPut) {\n\n         instance.put(context.apiUrl, context.formData)\n\n         .then(response => { \n            context['response'] = response.data;\n            this.handePutResponse(self, context);\n            ModalManager.close();\n            return Promise.resolve(response);\n            })\n            .catch(error => {\n               if (error.request) {\n                  context['errorRequest'] = error.request;\n                  //this.handleErrors(response.data, context)\n               }\n               else if(error.response){\n                  context['errorResponse'] = error.response;\n                  //this.handleErrors(response.data, context)\n               }\n\n            });\n\n      }\n\n      else if(context.isPost){\n         instance.post(context.apiUrl, context.formData)\n         .then(response => {\n            context['response'] = response.data;\n            this.handePostResponse(self, context);\n            ModalManager.close();\n            return Promise.resolve(response);\n\n         })\n\n         .catch(error => {\n            if (error.request) {\n               console.log(error.request)\n               context['errorRequest'] = error.request;\n               //this.handleErrors(response.data, context)\n            }\n            else if(error.response){\n               console.log(error.response)\n               context['errorResponse'] = error.response;\n               //this.handleErrors(response.data, context)\n            }\n         })\n      }\n   }\n};\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}