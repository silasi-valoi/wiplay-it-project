{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/higher-order-components/main.js\";\nimport React from 'react';\nimport { ModalManager } from 'react-dynamic-modal';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { handleSubmit, getCurrentUser, getPost, getUserList, getUserProfile, getPostList, getQuestion, getReplyList, getReplyChildrenList, getQuestionList as _getQuestionList, getCommentList, getIndex } from \"dispatch/index\";\nimport * as action from 'actions/actionCreators';\nimport { ModalOptionsMenu } from \"components/buttons\";\nimport { DropImage } from \"containers/profile/edit_profile\";\nimport AppEditor from 'containers/editor';\nimport { store } from \"index\";\nimport Modals from \"containers/modal-conf\";\nimport Helper from 'containers/utils/helpers';\nconst helper = new Helper();\nexport function withMain(Component) {\n  var _temp;\n\n  return _temp = class Main extends Component {\n    constructor(_props) {\n      super(_props);\n\n      this.onStoreUpdate = () => {\n        const onStoreChange = () => {\n          let storeUpdate = store.getState();\n          console.log(storeUpdate); //if (!storeUpdate.question.visited && storeUpdate.question.newObject) {\n          //   console.log('redirecting to question page')\n          // this.redirecToQuestionPage(storeUpdate.question) \n          // }\n          //Open the Modal whenever modal is true.\n\n          this.openModal(storeUpdate.modal);\n        };\n\n        this.unsubscribe = store.subscribe(onStoreChange);\n      };\n\n      this.logout = () => {\n        localStorage.removeItem('@@CachedEntyties');\n\n        if (this.isAuthenticated()) {\n          localStorage.removeItem('@@CachedEntyties');\n          this.props.history.push('/user/registration');\n        } else {\n          localStorage.removeItem('@@CachedEntyties');\n          this.props.history.push('/user/registration');\n        }\n\n        ModalManager.close();\n      };\n\n      this.openModal = modal => {\n        //Open modal is open is true and close the if isOpen is false\n        //And most importantly render the modal with its contents based on the \n        //action dispatched \n        const modals = new Modals();\n\n        if (modal.isOpen) {\n          let modalProps = modal.modalProps; //Get Some important props and merge them with modalProps\n\n          let props = this.getProps();\n          Object.assign(props, modalProps);\n\n          if (modal.modalType === 'editor') {\n            modalProps['modalContents'] = React.createElement(AppEditor, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 179\n              },\n              __self: this\n            }));\n            console.log(modal, modalProps);\n            modals.editorModal(modal.modalProps);\n            setTimeout(() => {\n              this.setState({\n                modalIsOpen: true\n              });\n              this.props.history.push({}, '');\n            }, 10);\n          } else if (modal.modalType === 'optionsMenu') {\n            modalProps['modalContents'] = React.createElement(ModalOptionsMenu, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189\n              },\n              __self: this\n            }));\n            modals.optionsMenuModal(modalProps);\n            setTimeout(() => {\n              this.setState({\n                modalIsOpen: true\n              });\n              this.props.history.push({}, '');\n            }, 10);\n          } else if (modal.modalType === 'dropImage') {\n            modalProps['modalContents'] = React.createElement(DropImage, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 199\n              },\n              __self: this\n            }));\n            modals.dropImageModal(modalProps);\n            setTimeout(() => {\n              this.setState({\n                modalIsOpen: true\n              });\n              this.props.history.push({}, '');\n            }, 10);\n          }\n        } else {\n          this.setState({\n            modalIsOpen: false\n          });\n          ModalManager.close();\n        }\n      };\n\n      this.redirecToQuestionPage = questionObj => {\n        questionObj = questionObj.newObject;\n\n        if (questionObj) {\n          let path = \"/question/\".concat(questionObj.slug, \"/\");\n          let currentUser = this.state.currentUser;\n          this.props.history.push(path, {\n            questionObj,\n            currentUser,\n            isNeQuestion: true\n          });\n        }\n      };\n\n      this.state = {\n        currentUser: '',\n        isAuthenticated: localStorage.getItem('auth') ? true : false,\n        modalIsOpen: false\n      };\n    }\n\n    isAuthenticated() {\n      let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n      if (cachedEntyties) {\n        let auth = cachedEntyties.auth;\n\n        if (auth && auth.isLoggedIn) {\n          return true;\n        }\n      }\n\n      return false;\n    } //static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    // return  dispatch => action.handleError(error);\n    //}\n    //componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    // console.log(error, info);\n    // }\n\n\n    componentWillMount() {//localStorage.removeItem('questionList');        \n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    componentDidUpdate(nextProps, prevState) {\n      console.log(nextProps, prevState);\n    }\n\n    componentWillReceiveProps(nextProps, prevProps) {\n      //let storeUpdate = store.getState();\n      if (this.state.modalIsOpen && this.props.history.action === \"POP\") {\n        if (this.state.modalIsOpen) {\n          store.dispatch(action.hideModal());\n        }\n      } else if (this.props.history && this.props.history.action === \"PUSH\") {//console.log(storeUpdate)\n      }\n    }\n\n    disableBack(e) {\n      if (this.state.modalIsOpen) {\n        e.returnValue = '';\n      }\n\n      e.preventDefault();\n    }\n\n    componentDidMount() {\n      this.onStoreUpdate(); //Subscribe on store change    \n\n      console.log(this.props);\n\n      if (!this.isAuthenticated()) {\n        //User is not authenticated,so redirect to authentication page.\n        this.props.history.push('/user/registration/');\n      }\n\n      store.dispatch(getCurrentUser());\n    }\n\n    geCurrentUser() {\n      let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n      if (cachedEntyties) {\n        return cachedEntyties.currentUser.user;\n      }\n\n      return {};\n    }\n\n    unfollowOrDownVote(params) {\n      if (params.objName === \"question\" || params.objName === \"userProfile\" || params.objName === \"usersList\") {\n        var followers = params.obj.followers - 1;\n        params['formData'] = helper.createFormData({\n          followers\n        });\n      } else {\n        var upvotes = params.obj.upvotes - 1;\n        params['formData'] = helper.createFormData({\n          upvotes\n        });\n      }\n\n      this.props.submit(params); //handle subimiting downVotes or Unfollwers \n    }\n\n    followOrUpVote(params) {\n      if (params.objName === \"question\" || params.objName === \"userProfile\" || params.objName === \"usersList\") {\n        var followers = params.obj.followers + 1;\n        params['formData'] = helper.createFormData({\n          followers\n        });\n      } else {\n        var upvotes = params.obj.upvotes + 1;\n        params['formData'] = helper.createFormData({\n          upvotes\n        });\n      }\n\n      this.props.submit(params); //handle subimiting upvotes or follwers \n    }\n\n    push() {\n      this.props.history.pus(this.props, 'hello');\n    }\n\n    getProps() {\n      let props = {\n        logout: this.logout,\n        followOrUpVote: this.followOrUpVote.bind(this),\n        unfollowOrDownVote: this.unfollowOrDownVote.bind(this),\n        currentUser: this.geCurrentUser()\n      };\n      Object.assign(props, this.props);\n      return props;\n    }\n\n    render() {\n      let props = this.getProps();\n      console.log(props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      })));\n    }\n\n  }, _temp;\n} // binds on `props` change\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    getIndex: () => dispatch(getIndex()),\n    getUserProfile: id => dispatch(getUserProfile(id)),\n    getUserList: props => dispatch(getUserList(props)),\n    getQuestionList: id => dispatch(_getQuestionList(id)),\n    getPostList: id => dispatch(getPostList(id)),\n    getQuestion: id => dispatch(getQuestion(id)),\n    getPost: id => dispatch(getPost(id)),\n    getCommentList: comment => dispatch(getCommentList(comment)),\n    getReplyList: props => dispatch(getReplyList(props)),\n    getReplyChildrenList: reply => dispatch(getReplyChildrenList(reply)),\n    getCurrentUser: apiUrl => dispatch(getCurrentUser()),\n    submit: props => dispatch(handleSubmit(props)),\n    showModal: props => dispatch(action.showModal(props)),\n    hideModal: props => dispatch(action.hideModal(props))\n  };\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    modal: state.modal,\n    entyties: state.entyties\n  };\n};\n\nconst composedHoc = compose(connect(mapStateToProps, mapDispatchToProps), withMain);\nexport default composedHoc;","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/higher-order-components/main.js"],"names":["React","ModalManager","connect","compose","handleSubmit","getCurrentUser","getPost","getUserList","getUserProfile","getPostList","getQuestion","getReplyList","getReplyChildrenList","getQuestionList","_getQuestionList","getCommentList","getIndex","action","ModalOptionsMenu","DropImage","AppEditor","store","Modals","Helper","helper","withMain","Component","Main","constructor","props","onStoreUpdate","onStoreChange","storeUpdate","getState","console","log","openModal","modal","unsubscribe","subscribe","logout","localStorage","removeItem","isAuthenticated","history","push","close","modals","isOpen","modalProps","getProps","Object","assign","modalType","editorModal","setTimeout","setState","modalIsOpen","optionsMenuModal","dropImageModal","redirecToQuestionPage","questionObj","newObject","path","slug","currentUser","state","isNeQuestion","getItem","cachedEntyties","JSON","parse","auth","isLoggedIn","componentWillMount","componentWillUnmount","componentDidUpdate","nextProps","prevState","componentWillReceiveProps","prevProps","dispatch","hideModal","disableBack","e","returnValue","preventDefault","componentDidMount","geCurrentUser","user","unfollowOrDownVote","params","objName","followers","obj","createFormData","upvotes","submit","followOrUpVote","pus","bind","render","mapDispatchToProps","ownProps","id","comment","reply","apiUrl","showModal","mapStateToProps","entyties","composedHoc"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { ModalManager} from 'react-dynamic-modal';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport {handleSubmit, getCurrentUser,getPost, getUserList,\n         getUserProfile,getPostList,getQuestion,getReplyList,getReplyChildrenList,\n         getQuestionList as _getQuestionList,getCommentList, getIndex }  from \"dispatch/index\"\nimport  * as action  from 'actions/actionCreators';\n\n\nimport { ModalOptionsMenu } from \"components/buttons\";\nimport { DropImage } from \"containers/profile/edit_profile\";\nimport AppEditor  from 'containers/editor'\nimport {store} from \"index\";\n\n\nimport Modals from \"containers/modal-conf\";\nimport Helper from 'containers/utils/helpers';\n\n\n\n\nconst helper   = new Helper();\n\ntype Match  = { url: string, params: any }\n\nexport function withMain(Component) {\n\n   return class Main extends Component {\n\n      constructor(props) {\n         super(props);\n\n         this.state = {\n            currentUser      : '',\n            isAuthenticated  :  localStorage.getItem('auth' )?true : false,\n            modalIsOpen      : false,\n         };\n          \n      }\n\n\n      isAuthenticated() {\n      \tlet cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n        \n        if (cachedEntyties){\n        \tlet { auth  }  = cachedEntyties;\n        \tif ( auth && auth.isLoggedIn){\n        \t\treturn true\n                \n        \t}\n        }\n\n        return false;\n      }\n\n      //static getDerivedStateFromError(error) {\n         // Update state so the next render will show the fallback UI.\n        // return  dispatch => action.handleError(error);\n      //}\n\n      \n      //componentDidCatch(error, info) {\n         // You can also log the error to an error reporting service\n        // console.log(error, info);\n     // }\n  \n      componentWillMount() {\n        //localStorage.removeItem('questionList');        \n      }\n\n      componentWillUnmount() {\n         this.unsubscribe();\n      }\n\n      componentDidUpdate(nextProps , prevState){\n         console.log(nextProps, prevState)\n      };\n\n      onStoreUpdate = () =>{\n \n         const onStoreChange = () => {\n            let storeUpdate = store.getState();\n            console.log(storeUpdate)\n            //if (!storeUpdate.question.visited && storeUpdate.question.newObject) {\n            //   console.log('redirecting to question page')\n              // this.redirecToQuestionPage(storeUpdate.question) \n           // }\n            //Open the Modal whenever modal is true.\n            this.openModal(storeUpdate.modal);\n         }\n\n         this.unsubscribe = store.subscribe(onStoreChange);\n\n      }\n\n      componentWillReceiveProps(nextProps, prevProps){ \n         //let storeUpdate = store.getState();\n         if (this.state.modalIsOpen && this.props.history.action === \"POP\") {\n            if (this.state.modalIsOpen) {\n                store.dispatch(action.hideModal())\n            }\n         }\n         else if (this.props.history && this.props.history.action === \"PUSH\") {\n            //console.log(storeUpdate)\n          }\n       \n      \n      }\n      \n      \n\n      disableBack(e) {\n                      \n         if (this.state.modalIsOpen) {\n            \n            e.returnValue = '';\n         }\n\n         e.preventDefault()\n      }\n\n      componentDidMount() {\n        this.onStoreUpdate() //Subscribe on store change    \n        console.log(this.props) \n\n        if (!this.isAuthenticated()) {\n            //User is not authenticated,so redirect to authentication page.\n            this.props.history.push('/user/registration/')\n        }\n\n        \n\n        store.dispatch(getCurrentUser());\n      };\n\n\n    logout = () => {\n         \n        localStorage.removeItem('@@CachedEntyties')\n\n        if (this.isAuthenticated()) {\n            localStorage.removeItem('@@CachedEntyties')\n            this.props.history.push('/user/registration')\n        }else{\n        \tlocalStorage.removeItem('@@CachedEntyties')\n            this.props.history.push('/user/registration')\n\n        }\n\n        ModalManager.close();\n    }\n\n    geCurrentUser(){\n      \tlet cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n      \tif (cachedEntyties) {\n      \t   return cachedEntyties.currentUser.user\n        }\n\n        return {};  \n      }\n\n\n\n    openModal = (modal) => {\n         //Open modal is open is true and close the if isOpen is false\n         //And most importantly render the modal with its contents based on the \n         //action dispatched \n         const modals   = new Modals();\n         if (modal.isOpen) {\n            let modalProps = modal.modalProps;\n            //Get Some important props and merge them with modalProps\n            let props = this.getProps()  \n            Object.assign(props, modalProps)\n\n            if (modal.modalType === 'editor') {\n               modalProps['modalContents'] =  <AppEditor {...props}/>;\n               console.log(modal, modalProps)\n               modals.editorModal(modal.modalProps);\n               setTimeout( () => {\n                   this.setState({modalIsOpen : true})\n                   this.props.history.push({},'')\n               }, 10);\n               \n            }\n            else if(modal.modalType === 'optionsMenu'){\n               modalProps['modalContents'] = <ModalOptionsMenu {...props}/>\n               modals.optionsMenuModal(modalProps)\n\n               setTimeout( () => {\n                   this.setState({modalIsOpen : true})\n                   this.props.history.push({},'')\n               }, 10);\n              \n            }\n            else if(modal.modalType === 'dropImage'){\n               modalProps['modalContents'] = <DropImage {...props}/>\n               modals.dropImageModal(modalProps)\n\n               setTimeout( () => {\n                   this.setState({modalIsOpen : true})\n                   this.props.history.push({},'')\n               }, 10);\n            }\n        \n\n         }else{\n            this.setState({modalIsOpen: false})\n            ModalManager.close();\n         }\n      }\n     \n      redirecToQuestionPage  = (questionObj) => {\n         questionObj = questionObj.newObject;\n         if (questionObj) {\n            let path = `/question/${questionObj.slug}/` \n            let currentUser = this.state.currentUser;\n            \n            this.props.history.push(path, {questionObj, currentUser, isNeQuestion:true})\n         }\n      };\n      \n      unfollowOrDownVote(params) {\n        \n         if (params.objName === \"question\" || params.objName === \"userProfile\" \n                                    || params.objName === \"usersList\" ) {\n            var followers     = params.obj.followers - 1;\n\n            params['formData'] = helper.createFormData({ followers });\n         }else{\n            var upvotes       = params.obj.upvotes - 1; \n            params['formData'] = helper.createFormData({upvotes})\n         }\n        this.props.submit(params); //handle subimiting downVotes or Unfollwers \n\n      };\n\n      followOrUpVote(params) {\n      \n         if (params.objName === \"question\" || params.objName === \"userProfile\"\n                                             || params.objName === \"usersList\") {\n            var followers     = params.obj.followers + 1;\n            params['formData'] = helper.createFormData({ followers });\n         }else{\n            var upvotes       = params.obj.upvotes + 1; \n            params['formData'] = helper.createFormData({upvotes})\n         }\n        this.props.submit(params); //handle subimiting upvotes or follwers \n             \n      };\n\n      push(){\n        this.props.history.pus(this.props, 'hello') \n      }\n     \n      getProps(){\n         let props = {\n            logout             : this.logout,\n            followOrUpVote     : this.followOrUpVote.bind(this),\n            unfollowOrDownVote : this.unfollowOrDownVote.bind(this),\n            currentUser        : this.geCurrentUser(),\n         };\n         \n         Object.assign(props, this.props );\n         return props;  \n         \n      }\n  \n\n      render() {\n         let props = this.getProps();\n         console.log(props)\n         return (\n              <div>\n                <Component {...props}/>\n              </div> \n\n            );\n      };\n\n   }\n}\n\n\n// binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => {\n   \n    return {\n    \tgetIndex             : ()        =>  dispatch(getIndex()), \n        getUserProfile       : (id)      => dispatch(getUserProfile(id)),\n        getUserList          : (props)   => dispatch(getUserList(props)),\n        getQuestionList      : (id)      => dispatch(_getQuestionList(id)),\n        getPostList          : (id)      => dispatch(getPostList(id)),\n        getQuestion          : (id)      => dispatch(getQuestion(id)),\n        getPost              : (id)      => dispatch(getPost(id)),\n        getCommentList       : (comment) => dispatch(getCommentList(comment)),\n        getReplyList         : (props)   => dispatch(getReplyList(props)),\n        getReplyChildrenList : (reply)   => dispatch(getReplyChildrenList(reply)),\n        getCurrentUser       : (apiUrl)  => dispatch(getCurrentUser()),\n        submit               : (props )  => dispatch(handleSubmit(props)), \n        showModal            : (props )  => dispatch(action.showModal(props)),\n        hideModal            : (props )  => dispatch(action.hideModal(props)),  \n   }\n\n};\n\n\n\n\nconst mapStateToProps = (state, ownProps) => {\n   \n    return {\n       modal         : state.modal,\n       entyties      : state.entyties,       \n    }\n};\n\nconst composedHoc = compose( connect(mapStateToProps, mapDispatchToProps),withMain )\n\n\nexport default  composedHoc;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}