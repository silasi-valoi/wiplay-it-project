{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/python_projects/wiplay-it-project/wiplayit_app/frontend/src/containers/editor.js\";\nimport React, { Component } from 'react';\nimport 'draft-js/dist/Draft.css';\nimport 'containers/app-editor.css';\nimport { CharacterMetadata, CompositeDecorator, AtomicBlockUtils, RichUtils, convertToRaw, convertFromRaw, Entity, genKey, EditorState, ContentBlock } from 'draft-js';\nimport { List, Repeat } from 'immutable';\nimport Axios from 'axios_instance';\nimport Helper from 'containers/utils/helpers';\nimport { TextAreaEditor, DraftEditor } from \"components/editor_components\";\nimport { EditorNavBar } from \"components/navBar\";\nimport Api from 'api';\nconst api = new Api();\nconst helper = new Helper();\nconst linkText = 'foo bar';\n\nfunction findLinkEntities(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges(character => {\n    const entityKey = character.getEntity();\n    return entityKey !== null && contentState.getEntity(entityKey).getType() === 'LINK';\n  }, callback);\n}\n\n;\n\nconst Link = props => {\n  const _props$contentState$g = props.contentState.getEntity(props.entityKey).getData(),\n        url = _props$contentState$g.url;\n\n  console.log(url);\n  return React.createElement(\"a\", {\n    href: url,\n    title: url,\n    className: \"link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default class AppEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeEditor = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      console.log(e);\n    };\n\n    this._handleChange = editorState => {\n      this.setState({\n        editorState,\n        onLinkInput: false\n      });\n    };\n\n    this.getFormData = () => {\n      let editorContents = this.state.editorState.getCurrentContent();\n      let validatedForm = helper.validateForm({\n        editorContents\n      });\n      var validForm = {};\n      var objName = this.props.objName;\n\n      if (objName === \"question\") {\n        let form = this.state.form;\n        validatedForm = helper.validateForm({\n          form\n        });\n        validForm = {\n          add_question: validatedForm.data\n        };\n      } else if (objName === \"post\") {\n        let form = this.state.form;\n        var add_title = helper.validateForm({\n          form\n        });\n        validForm = {\n          add_post: validatedForm.data,\n          add_title: add_title.data\n        };\n      } else if (objName === \"answer\") {\n        validForm = {\n          add_answer: validatedForm.data\n        };\n      } else if (objName === \"comment\") {\n        validForm = {\n          comment: validatedForm.data\n        };\n      } else if (objName === \"reply\") {\n        validForm = {\n          reply: validatedForm.data\n        };\n      }\n\n      console.log(validForm, validatedForm);\n      return helper.createFormData(validForm);\n    };\n\n    this.getSubmitProps = () => {\n      return Object.assign({\n        formData: this.getFormData()\n      }, this.props);\n    };\n\n    const decorator = new CompositeDecorator([{\n      strategy: findLinkEntities,\n      component: Link\n    }]);\n    this.state = {\n      editorState: EditorState.createEmpty(decorator),\n      form: {\n        textarea: \"\"\n      },\n      editorPlaceHolder: \"\",\n      postTitle: \"\",\n      showURLInput: false,\n      showImage: false,\n      url: '',\n      urlType: '',\n      urlValue: '',\n      italicOnClick: false,\n      boldOnClick: false,\n      onLinkInput: false,\n      onPost: false,\n      contentIsEmpty: true\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n    this.onURLChange = this.onURLChange.bind(this);\n    this.onPostTitleChange = this.onPostTitleChange.bind(this);\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.addBold = this.addBold.bind(this);\n    this.addItalic = this.addItalic.bind(this);\n    this.handleAddLink = this.handleAddLink.bind(this);\n    this.promptLinkIpunt = this.promptLinkIpunt.bind(this);\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    console.log(newState);\n\n    if (newState) {\n      console.log(newState);\n      this.onChange(newState);\n      return 'handled';\n    }\n\n    console.log(newState);\n    return 'not-handled';\n  }\n\n  onChange(editorState) {\n    const contentState = editorState.getCurrentContent();\n    let validatedForm = helper.validateForm({\n      editorContents: contentState\n    });\n\n    if (validatedForm.formIsValid) {\n      this.setState({\n        contentIsEmpty: false\n      });\n    } else {\n      this.setState({\n        contentIsEmpty: true\n      });\n    }\n\n    this.setState({\n      editorState\n    });\n  }\n\n  onTextAreaChange(event) {\n    event.preventDefault();\n    let form = this.state.form;\n    form[event.target.name] = event.target.value;\n    this.setState({\n      form\n    });\n    let validatedForm = helper.validateForm({\n      form: this.state.form\n    });\n\n    if (validatedForm.formIsValid) {\n      this.setState({\n        contentIsEmpty: false\n      });\n    } else {\n      this.setState({\n        contentIsEmpty: true\n      });\n    }\n  }\n\n  handleEmptyForm(params) {\n    console.log(params);\n  }\n\n  componentDidUpdate() {\n    //let contents =  JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()))\n    //const contentState = convertFromRaw( JSON.parse( contents) );\n    //console.log(JSON.parse( contents))\n    //console.log(convertToRaw(this.state.editorState.getCurrentContent()))\n    window.onpopstate = e => {\n      e.preventDefault(); //console.log(e);\n    };\n  }\n\n  componentDidMount() {\n    //window.history.pushState({}, '');  \n    //window.addEventListener(\"popstate\", this.closeEditor.bind(this));\n    //window.onpopstate = this.closeEditor;\n    console.log(this.props);\n    let state = this.state;\n    state['objName'] = this.props.objName;\n    state['editorPlaceHolder'] = this.props.editorPlaceHolder;\n\n    if (this.props.objName === 'post') {\n      this.setState({\n        onPost: true\n      });\n    }\n\n    if (this.props.objId) {\n      state['objId'] = this.props.objId;\n    }\n\n    if (this.props.isPut) {\n      state['contentIsEmpty'] = false;\n\n      if (this.props.objName === 'question') {\n        state.form['textarea'] = this.props.obj.add_question;\n      } else if (this.props.objName === 'answer') {\n        let storedState = JSON.parse(this.props.obj.add_answer);\n        console.log(this.props);\n        let editorState = this.newEditorState(storedState);\n        state['editorState'] = editorState; //\n      } else if (this.props.objName === 'comment') {\n        let storedState = JSON.parse(this.props.obj.comment);\n        let editorState = this.newEditorState(storedState);\n        state['editorState'] = editorState; //\n      } else if (this.props.objName === 'reply') {\n        let storedState = JSON.parse(this.props.obj.reply);\n        let editorState = this.newEditorState(storedState);\n        state['editorState'] = editorState;\n      }\n    }\n\n    this.setState({\n      state\n    });\n  }\n\n  newEditorState(storedState) {\n    const contentState = convertFromRaw(storedState);\n    return EditorState.createWithContent(contentState);\n  }\n\n  blockStyleFn(contentBlock) {//const type = contentBlock.getType();\n    //console.log(contentBlock) \n  }\n\n  onPostTitleChange(e) {\n    e.preventDefault();\n    console.log(e.target);\n    this.setState({\n      postTitle: e.target.value\n    });\n  }\n\n  onURLChange(e) {\n    e.preventDefault();\n    const editorState = this.state.editorState;\n    var reader = new FileReader();\n    var file = e.target.files[0];\n    let name = e.target.name;\n    console.log(file);\n\n    reader.onloadend = () => {\n      let apiUrl = api.createDraftEditorContentsApi(this);\n      let form = {\n        'draft_editor_file': file\n      };\n      let fileForm = helper.createFormData(form);\n      const axiosApi = new Axios(true);\n      let instance = axiosApi.axiosInstance();\n      instance.post(apiUrl, fileForm).then(response => {\n        const entityKey = Entity.create(name, 'IMMUTABLE', {\n          src: response.data.draft_editor_file\n        });\n        this.setState({\n          editorState: AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n        });\n      }).catch(error => {\n        if (error.request) {\n          console.log(error.request);\n        } else if (error.response) {\n          console.log(error.response);\n        }\n      });\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  addBold(e) {\n    e.preventDefault();\n\n    if (this.state.boldOnClick) {\n      this.setState({\n        boldOnClick: false\n      });\n    } else {\n      this.setState({\n        boldOnClick: true\n      });\n    }\n\n    this.toggleInlineStyle('BOLD');\n  }\n\n  addItalic(e) {\n    e.preventDefault();\n\n    if (!this.state.italicOnClick) {\n      this.setState({\n        italicOnClick: false\n      });\n    } else {\n      this.setState({\n        italicOnClick: true\n      });\n    }\n\n    this.toggleInlineStyle('ITALIC');\n  }\n\n  toggleInlineStyle(style) {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, style));\n  }\n\n  promptLinkIpunt(e) {\n    e.preventDefault();\n    console.log(this);\n    this.setState({\n      onLinkInput: true\n    });\n  }\n\n  handleAddLink(linkUrl) {\n    const editorState = this.state.editorState;\n    let newEditorState = new inser_block('before', editorState); //const blockMap = contentState.getBlockMap();\n    // create link entity\n\n    const newContentState = newEditorState.getCurrentContent();\n    const contentStateWithEntity = newContentState.createEntity('LINK', 'MUTABLE', {\n      url: linkUrl\n    });\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n    newEditorState = EditorState.set(newEditorState, {\n      currentContent: contentStateWithEntity\n    });\n    newEditorState = RichUtils.toggleLink(newEditorState, newEditorState.getSelection(), entityKey);\n\n    this._handleChange(newEditorState);\n\n    console.log(newEditorState);\n  }\n\n  sendMediaContent() {}\n\n  getTextAreaProps() {\n    let props = {\n      value: this.state.form.textarea,\n      onChange: this.onTextAreaChange,\n      name: \"textarea\",\n      className: \"create-question-form\",\n      placeholder: this.props.editorPlaceHolder\n    };\n    return props;\n  }\n\n  getProps() {\n    let currentContent = this.state.editorState.getCurrentContent();\n    let editorContents = convertToRaw(currentContent);\n    editorContents = JSON.stringify(editorContents);\n    let props = {\n      onChange: this.onChange,\n      onURLChange: this.onURLChange,\n      onPostTitleChange: this.onPostTitleChange,\n      handleAddLink: this.handleAddLink,\n      promptLinkIpunt: this.promptLinkIpunt,\n      addItalic: this.addItalic,\n      addBold: this.addBold,\n      italicOnClick: this.state.italicOnClick,\n      boldOnClick: this.state.boldOnClick,\n      onLinkInput: this.state.onLinkInput,\n      onPost: this.state.onPost,\n      editorContents: editorContents,\n      editorPlaceHolder: this.state.editorPlaceHolder,\n      editorState: this.state.editorState,\n      postTitle: this.state.postTitle,\n      contentIsEmpty: this.state.contentIsEmpty,\n      handleEmptyForm: this.handleEmptyForm.bind(this),\n      submitProps: this.getSubmitProps(),\n      textAreaProps: this.getTextAreaProps()\n    };\n\n    if (this.state.contentIsEmpty) {\n      props['canSubmit'] = true;\n      props['submitStyles'] = {\n        opacity: '0.70'\n      };\n    } else {\n      props['canSubmit'] = false;\n      props['submitStyles'] = {\n        opacity: '2'\n      };\n    }\n\n    return Object.assign(props, this.props);\n  }\n\n  render() {\n    let props = this.getProps();\n    console.log(props);\n    return React.createElement(\"div\", {\n      className: \"editors-page\",\n      onClick: this.focus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(EditorNavBar, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    })), this.props.objName === \"question\" ? React.createElement(TextAreaEditor, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    })) : React.createElement(DraftEditor, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    })));\n  }\n\n}\n;\nexport const inser_block = (direction, editorState) => {\n  //const selection = editorState.getSelection();\n  const contentState = editorState.getCurrentContent(); //const currentBlock = contentState.getBlockForKey(selection.getEndKey());\n\n  const blockMap = contentState.getBlockMap(); // Split the blocks\n  //const blocksBefore = blockMap.toSeq().takeUntil(function (v) {\n  // return v === currentBlock\n  //})\n  //const blocksAfter = blockMap.toSeq().skipUntil(function (v) {\n  // return v === currentBlock\n  //}).rest()\n  //const newBlockKey = genKey()\n\n  const newBlock = new ContentBlock({\n    key: genKey(),\n    text: linkText,\n    type: 'unstyled',\n    characterList: new List(Repeat(CharacterMetadata.create(), linkText.length))\n  });\n  const newBlockMap = blockMap.toSeq().concat([[newBlock.getKey(), newBlock]]).toOrderedMap();\n  const newContent = contentState.merge({\n    blockMap: newBlockMap\n  });\n  let newEditorState = EditorState.push(editorState, newContent, 'insert-fragment'); //let newSelection = new SelectionState({\n  // anchorKey: newBlockKey,\n  // anchorOffset: 0,\n  // focusKey: newBlockKey,\n  // focusOffset: linkText.length\n  //});\n  //newEditorState = EditorState.forceSelection(newEditorState, newSelection);\n\n  return newEditorState;\n};","map":{"version":3,"sources":["/home/silasi/Deprojectos/python_projects/wiplay-it-project/wiplayit_app/frontend/src/containers/editor.js"],"names":["React","Component","CharacterMetadata","CompositeDecorator","AtomicBlockUtils","RichUtils","convertToRaw","convertFromRaw","Entity","genKey","EditorState","ContentBlock","List","Repeat","Axios","Helper","TextAreaEditor","DraftEditor","EditorNavBar","Api","api","helper","linkText","findLinkEntities","contentBlock","callback","contentState","findEntityRanges","character","entityKey","getEntity","getType","Link","props","getData","url","console","log","children","AppEditor","constructor","closeEditor","e","preventDefault","stopPropagation","_handleChange","editorState","setState","onLinkInput","getFormData","editorContents","state","getCurrentContent","validatedForm","validateForm","validForm","objName","form","add_question","data","add_title","add_post","add_answer","comment","reply","createFormData","getSubmitProps","Object","assign","formData","decorator","strategy","component","createEmpty","textarea","editorPlaceHolder","postTitle","showURLInput","showImage","urlType","urlValue","italicOnClick","boldOnClick","onPost","contentIsEmpty","onChange","bind","onTextAreaChange","onURLChange","onPostTitleChange","handleKeyCommand","addBold","addItalic","handleAddLink","promptLinkIpunt","command","newState","formIsValid","event","target","name","value","handleEmptyForm","params","componentDidUpdate","window","onpopstate","componentDidMount","objId","isPut","obj","storedState","JSON","parse","newEditorState","createWithContent","blockStyleFn","reader","FileReader","file","files","onloadend","apiUrl","createDraftEditorContentsApi","fileForm","axiosApi","instance","axiosInstance","post","then","response","create","src","draft_editor_file","insertAtomicBlock","catch","error","request","readAsDataURL","toggleInlineStyle","style","linkUrl","inser_block","newContentState","contentStateWithEntity","createEntity","getLastCreatedEntityKey","set","currentContent","toggleLink","getSelection","sendMediaContent","getTextAreaProps","className","placeholder","getProps","stringify","submitProps","textAreaProps","opacity","render","focus","direction","blockMap","getBlockMap","newBlock","key","text","type","characterList","length","newBlockMap","toSeq","concat","getKey","toOrderedMap","newContent","merge","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport 'draft-js/dist/Draft.css';\nimport 'containers/app-editor.css';\nimport { CharacterMetadata, CompositeDecorator, AtomicBlockUtils,\n         RichUtils,convertToRaw, convertFromRaw,Entity,\n         genKey, EditorState, ContentBlock} from 'draft-js';\n\nimport { List, Repeat } from 'immutable';\nimport Axios from 'axios_instance'\nimport  Helper from 'containers/utils/helpers';\nimport {TextAreaEditor, DraftEditor } from  \"components/editor_components\";\nimport { EditorNavBar } from \"components/navBar\";\n\nimport Api from 'api';\n\n\n  \nconst api      = new Api();\nconst helper   = new Helper();  \n\nconst linkText = 'foo bar';\n\nfunction findLinkEntities(contentBlock, callback, contentState) {\n\n    contentBlock.findEntityRanges((character) => {\n\n        const entityKey = character.getEntity();\n\n        return (\n            entityKey !== null &&\n                contentState.getEntity(entityKey).getType() === 'LINK'\n            );\n\n    }, callback );\n};\n\n\nconst Link = (props) => {\nconst { url } = props.contentState.getEntity(props.entityKey).getData();\nconsole.log(url)\n\n\nreturn (\n    <a href={url} title={url} className=\"link\">\n      {props.children}\n    </a>\n  );\n};\n\n\n\n\nexport default  class AppEditor extends Component{\n\n\n   constructor(props) {\n        super(props);\n        const decorator = new CompositeDecorator([\n         {\n           strategy: findLinkEntities,\n           component: Link,\n         },\n      ]);\n\n\n      \n      this.state = {\n         editorState       : EditorState.createEmpty(decorator),\n         form              : {textarea   :  \"\", },\n         editorPlaceHolder : \"\", \n         postTitle         : \"\",\n         showURLInput      : false,\n         showImage         : false,\n         url               : '',\n         urlType           : '',\n         urlValue          : '',\n         italicOnClick     : false,\n         boldOnClick       : false,\n         onLinkInput       : false, \n         onPost            : false,\n         contentIsEmpty    : true,\n\n      };\n\n      this.onChange          = this.onChange.bind(this);\n      this.onTextAreaChange  = this.onTextAreaChange.bind(this);\n      this.onURLChange       = this.onURLChange.bind(this);\n      this.onPostTitleChange = this.onPostTitleChange.bind(this)\n      this.handleKeyCommand  = this.handleKeyCommand.bind(this);\n      this.addBold           = this.addBold.bind(this);\n      this.addItalic         = this.addItalic.bind(this);\n      this.handleAddLink     = this.handleAddLink.bind(this); \n      this.promptLinkIpunt   = this.promptLinkIpunt.bind(this);\n   };\n\n    handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        console.log(newState)\n        if (newState) {\n            console.log(newState)\n            this.onChange(newState);\n            return 'handled';\n        }\n\n        console.log(newState)\n        return 'not-handled';\n    }\n\n   \n\n    onChange(editorState){\n\n        const contentState = editorState.getCurrentContent();\n        \n        let validatedForm = helper.validateForm({editorContents : contentState})\n\n        if (validatedForm.formIsValid) {\n            this.setState({contentIsEmpty : false,})\n        }\n        else {\n           this.setState({contentIsEmpty : true,})\n\n        }\n\n        this.setState({ editorState, });\n    };\n\n\n\n   onTextAreaChange(event) {\n      event.preventDefault();\n      let form = this.state.form;\n      form[event.target.name] = event.target.value;\n      this.setState({form});\n\n      let validatedForm = helper.validateForm({form : this.state.form})\n      if (validatedForm.formIsValid) {\n         this.setState({contentIsEmpty : false,})\n      }else {\n         this.setState({contentIsEmpty : true,})\n\n      }\n\n\n   }\n\n   \n   \n    handleEmptyForm(params){\n       console.log(params)\n\n    } \n\n    componentDidUpdate(){\n       //let contents =  JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()))\n       //const contentState = convertFromRaw( JSON.parse( contents) );\n       //console.log(JSON.parse( contents))\n       //console.log(convertToRaw(this.state.editorState.getCurrentContent()))\n        window.onpopstate =  (e) => {\n            e.preventDefault();\n           //console.log(e);\n        }\n    }\n\n    componentDidMount(){\n    \n       //window.history.pushState({}, '');  \n                              \n       //window.addEventListener(\"popstate\", this.closeEditor.bind(this));\n       //window.onpopstate = this.closeEditor;\n\n       console.log(this.props)\n\n       let state = this.state;\n       state['objName'] = this.props.objName;\n       state['editorPlaceHolder'] = this.props.editorPlaceHolder;\n            \n       if (this.props.objName === 'post') {\n         this.setState({onPost: true })\n      }\n\n      if (this.props.objId) {\n         state['objId']    = this.props.objId;\n      }\n   \n      if (this.props.isPut) {\n         state['contentIsEmpty'] = false;\n         if (this.props.objName === 'question') {\n            state.form['textarea']  = this.props.obj.add_question; \n         }\n\n         else if (this.props.objName === 'answer') {\n            let storedState = JSON.parse(this.props.obj.add_answer);\n            console.log(this.props)\n            let editorState = this.newEditorState(storedState);\n            state['editorState']  = editorState; //\n           \n\n         }\n\n         else if (this.props.objName === 'comment') {\n            let storedState = JSON.parse(this.props.obj.comment);\n            let editorState = this.newEditorState(storedState);\n            state['editorState']  = editorState; //\n           \n         }\n\n         else if (this.props.objName === 'reply') {\n            let storedState = JSON.parse(this.props.obj.reply);\n            let editorState = this.newEditorState(storedState);\n            state['editorState']  = editorState; \n             \n         }\n             \n      }\n      \n      this.setState({state})\n   }\n\n    closeEditor = (e) => {\n       e.preventDefault();\n       e.stopPropagation();\n       console.log(e);\n\n     }\n\n\n    newEditorState(storedState){\n       const contentState = convertFromRaw(storedState);\n       return  EditorState.createWithContent(contentState);\n    }\n\n    blockStyleFn(contentBlock) {\n       //const type = contentBlock.getType();\n       //console.log(contentBlock) \n  \n    }\n\n    onPostTitleChange(e){\n        e.preventDefault();\n        console.log(e.target)\n      \n        this.setState({ postTitle:  e.target.value, });\n    }\n\n    onURLChange(e) {\n        e.preventDefault();\n        const {editorState} = this.state;\n            \n        var reader = new FileReader();\n        var file = e.target.files[0];\n        let name = e.target.name;\n      \n        console.log(file)\n\n            \n        reader.onloadend = () => {\n            let apiUrl     = api.createDraftEditorContentsApi(this);\n            let form = { 'draft_editor_file': file}\n            let fileForm   = helper.createFormData(form);\n            const axiosApi = new Axios(true);\n            let instance   = axiosApi.axiosInstance();  \n\n\n            instance.post(apiUrl, fileForm)\n        \n            .then(response => {\n            \n            const entityKey = Entity.create(name, 'IMMUTABLE', {src: response.data.draft_editor_file});\n\n            this.setState({\n                editorState: AtomicBlockUtils.insertAtomicBlock(\n                editorState,\n                entityKey,\n                ' '\n               ),\n             \n            });\n           \n                      \n         })\n         .catch(error => {\n\n            if (error.request) {\n               console.log(error.request)\n            }\n            else if(error.response){\n               console.log(error.response)\n            }\n         })\n      }\n\n      reader.readAsDataURL(file);\n   \n\n    };\n\n   \n   addBold(e){\n      e.preventDefault();\n      if (this.state.boldOnClick) {\n         this.setState({boldOnClick : false});\n      }else{\n         this.setState({boldOnClick : true});\n      }\n\n      this.toggleInlineStyle('BOLD');\n   }     \n\n   addItalic(e){\n      e.preventDefault();\n      if (! this.state.italicOnClick) {\n         this.setState({italicOnClick:false})\n      }else{\n         this.setState({italicOnClick:true})\n      }\n      this.toggleInlineStyle('ITALIC'); \n   }\n   \n   toggleInlineStyle(style){\n      this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, style));\n   }\n      \n   promptLinkIpunt(e){\n      e.preventDefault()\n      console.log(this);\n      this.setState({onLinkInput: true})\n   }\n\n    handleAddLink(linkUrl) {\n        const { editorState } = this.state;\n        let newEditorState = new inser_block('before', editorState)\n   \n        //const blockMap = contentState.getBlockMap();\n        // create link entity\n\n        const newContentState = newEditorState.getCurrentContent();\n        const contentStateWithEntity = newContentState.createEntity(\n                                                'LINK',\n                                                'MUTABLE',\n                                                { url: linkUrl }\n                                          );\n\n\n        const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n        newEditorState = EditorState.set(newEditorState, { currentContent: contentStateWithEntity });\n\n        newEditorState = RichUtils.toggleLink(newEditorState, newEditorState.getSelection(), entityKey);\n\n        this._handleChange(newEditorState)\n  \n        console.log(newEditorState)\n    };\n\n    _handleChange = (editorState) => {\n        this.setState({ editorState, onLinkInput:false });\n    };\n\n    sendMediaContent(){}\n\n\n    getFormData = () =>{\n      let editorContents = this.state.editorState.getCurrentContent();\n      let validatedForm  = helper.validateForm({editorContents});\n      var validForm      = {};\n\n      var objName = this.props.objName;\n      \n      if (objName === \"question\") {\n         let form      =  this.state.form;\n         validatedForm =  helper.validateForm({form});\n         validForm     =  {add_question: validatedForm.data}; \n      }\n      else if (objName === \"post\") {\n        let form      =  this.state.form;\n        var add_title =  helper.validateForm({form});\n        \n        validForm   =  {\n            add_post  : validatedForm.data,\n            add_title : add_title.data, \n        };\n\n      }\n\n      else if(objName === \"answer\"){\n         validForm   =  {add_answer : validatedForm.data};  \n      }else if(objName === \"comment\"){\n         validForm   =  {comment : validatedForm.data};    \n      }\n      else if(objName === \"reply\"){\n         validForm   =  {reply : validatedForm.data};    \n      }\n      console.log(validForm, validatedForm) \n      return helper.createFormData(validForm);\n   };\n\n   getSubmitProps = () =>{\n      return Object.assign({formData : this.getFormData()}, this.props);\n   }\n\n\n    getTextAreaProps() {\n\n        let props = {\n           value       : this.state.form.textarea,\n           onChange    : this.onTextAreaChange,\n           name        : \"textarea\",\n           className   : \"create-question-form\",\n           placeholder : this.props.editorPlaceHolder,\n        };\n\n        return props;\n    };\n\n\n\n    getProps() {\n       let currentContent   = this.state.editorState.getCurrentContent();\n       let editorContents = convertToRaw(currentContent);\n       editorContents =  JSON.stringify(editorContents)\n    \n        let props =  {\n            onChange          : this.onChange,\n            onURLChange       : this.onURLChange,\n            onPostTitleChange : this.onPostTitleChange,\n            handleAddLink     : this.handleAddLink,\n            promptLinkIpunt   : this.promptLinkIpunt,\n            addItalic         : this.addItalic,\n            addBold           : this.addBold,\n            italicOnClick     : this.state.italicOnClick,\n            boldOnClick       : this.state.boldOnClick,\n            onLinkInput       : this.state.onLinkInput,\n            onPost            : this.state.onPost,\n            editorContents    : editorContents,\n            editorPlaceHolder : this.state.editorPlaceHolder,\n            editorState       : this.state.editorState,\n            postTitle         : this.state.postTitle,\n            contentIsEmpty    : this.state.contentIsEmpty,\n            handleEmptyForm   : this.handleEmptyForm.bind(this),\n            submitProps       : this.getSubmitProps(),\n            textAreaProps     : this.getTextAreaProps(), \n        } \n\n        if (this.state.contentIsEmpty) {\n                props['canSubmit']    = true;\n                props['submitStyles'] = {opacity:'0.70',};\n            }else{\n                props['canSubmit']    = false;\n                props['submitStyles'] = {opacity:'2',};\n            }\n\n        return Object.assign(props, this.props);\n      \n    }\n\n    render() {\n        let props = this.getProps();\n        console.log(props)\n        return (\n            <div className=\"editors-page\" onClick={this.focus}>\n               <EditorNavBar {...props}/>\n\n               {this.props.objName === \"question\"?\n                  <TextAreaEditor {...props}/>\n                  :\n                  <DraftEditor {...props}/>\n               }\n               \n            </div>\n        );\n    }\n};\n\n\n\n\n\n\nexport const inser_block = (direction, editorState) => {\n    //const selection = editorState.getSelection();\n    const contentState = editorState.getCurrentContent();\n    //const currentBlock = contentState.getBlockForKey(selection.getEndKey());\n\n   const blockMap = contentState.getBlockMap()\n   // Split the blocks\n   //const blocksBefore = blockMap.toSeq().takeUntil(function (v) {\n     // return v === currentBlock\n   //})\n   //const blocksAfter = blockMap.toSeq().skipUntil(function (v) {\n     // return v === currentBlock\n   //}).rest()\n\n   //const newBlockKey = genKey()\n   \n\n   const newBlock = new ContentBlock({\n        key: genKey(),\n        text: linkText,\n        type: 'unstyled',\n        characterList: new List(Repeat(CharacterMetadata.create(), linkText.length)),\n\n   });\n\n   const newBlockMap = blockMap.toSeq().concat([[newBlock.getKey(), newBlock]]).toOrderedMap();\n   const newContent  = contentState.merge({\n        blockMap: newBlockMap,\n\n\n    })\n\n\n   \n\n   let newEditorState = EditorState.push(editorState, newContent, 'insert-fragment');\n\n   //let newSelection = new SelectionState({\n     // anchorKey: newBlockKey,\n     // anchorOffset: 0,\n     // focusKey: newBlockKey,\n     // focusOffset: linkText.length\n    //});\n    \n    //newEditorState = EditorState.forceSelection(newEditorState, newSelection);\n\n   return newEditorState\n}\n\n\n"]},"metadata":{},"sourceType":"module"}