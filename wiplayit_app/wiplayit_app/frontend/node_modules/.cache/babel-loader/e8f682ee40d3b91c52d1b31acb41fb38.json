{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/profile/profile_page.js\";\nimport React, { Component } from 'react';\nimport { ModalManager } from 'react-dynamic-modal';\nimport { PartalNavigationBar, NavigationBarBigScreen } from \"components/navBar\";\nimport Helper from 'containers/utils/helpers';\nimport * as action from 'actions/actionCreators';\nimport { ProfileComponent, UserAnswers } from \"components/profile_components\";\nimport withMain from 'containers/higher-order-components/main';\nimport { store } from \"index\";\nimport AjaxLoader from \"components/ajax-loader\";\n\nclass ProfilePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userItemsComponent: UserAnswers,\n      isProfileBox: true,\n      pageName: \"Profile\",\n      profileById: ''\n    };\n    this.redirectToEdit = this.redirectToEdit.bind(this);\n  }\n\n  componentWillMount() {}\n\n  componentWillReceiveProps(nextProps, prevProps) {\n    var profileById = this.state.profileById;\n    const userProfile = nextProps.entyties.userProfile.byId[profileById];\n\n    if (userProfile) {\n      console.log(userProfile);\n      let user = userProfile.user;\n      var answers = nextProps.entyties.answers;\n\n      if (user) {\n        console.log(user, usersAnswers);\n        var byId = \"usersAnswers\".concat(user.id);\n        answers = answers.byId[byId];\n        var usersAnswers = userProfile.answers;\n\n        if (!answers) {\n          store.dispatch(action.getAnswerListPending(byId));\n          store.dispatch(action.getAnswerListSuccess(byId, usersAnswers));\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    let location_state = this.props.location.state;\n\n    if (location_state.userProfile) {\n      let userId = location_state.userProfile.id;\n      this.setState({\n        profileById: \"userProfile\".concat(userId)\n      });\n      this.props.getUserProfile(userId);\n    }\n  }\n\n  showUserItems(params) {\n    let items = params.items,\n        component = params.component,\n        byId = params.byId;\n    this.setState({\n      userItemsComponent: component\n    });\n\n    switch (items) {\n      case 'isUsersAnswers':\n        store.dispatch(action.getAnswerListPending(byId));\n        store.dispatch(action.getAnswerListSuccess(byId, params.usersAnswers));\n        return;\n\n      case 'isUsersQuestions':\n        store.dispatch(action.getQuestionListPending(byId));\n        store.dispatch(action.getQuestionListSuccess(byId, params.usersQuestions));\n        return;\n\n      case 'isUsersPosts':\n        store.dispatch(action.getPostListPending(byId));\n        store.dispatch(action.getPostListSuccess(byId, params.usersPosts));\n        return;\n\n      case 'isUsersFollowings':\n        store.dispatch(action.getUserListPending(byId));\n        store.dispatch(action.getUserListSuccess(byId, params.usersFollowings));\n        return;\n\n      case 'isUsersFollowers':\n        store.dispatch(action.getUserListPending(byId));\n        store.dispatch(action.getUserListSuccess(byId, params.usersFollowers));\n        return;\n    }\n  }\n\n  redirectToEdit(params) {\n    ModalManager.close();\n    console.log(this.props);\n    this.props.history.push(params.pathToEditProfile, params.state);\n  }\n\n  getProps() {\n    let props = {\n      pageName: this.state.pageName,\n      userItemsComponent: this.state.userItemsComponent,\n      showUserItems: this.showUserItems.bind(this),\n      isProfileBox: this.state.isProfileBox,\n      redirectToEdit: this.redirectToEdit,\n      profileById: this.state.profileById\n    };\n    return Object.assign(props, this.props);\n  }\n\n  render() {\n    let props = this.getProps();\n    var profileById = props.profileById;\n    const userProfile = props.entyties.userProfile.byId[profileById];\n    return React.createElement(\"div\", {\n      id: \"profile-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(PartalNavigationBar, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(NavigationBarBigScreen, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), userProfile ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, userProfile.isLoading ? React.createElement(\"div\", {\n      className: \"page-spin-loder-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(AjaxLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })) : React.createElement(ProfileComponent, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }))) : \"\");\n  }\n\n}\n\n;\nexport default withMain(ProfilePage);","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/profile/profile_page.js"],"names":["React","Component","ModalManager","PartalNavigationBar","NavigationBarBigScreen","Helper","action","ProfileComponent","UserAnswers","withMain","store","AjaxLoader","ProfilePage","constructor","props","state","userItemsComponent","isProfileBox","pageName","profileById","redirectToEdit","bind","componentWillMount","componentWillReceiveProps","nextProps","prevProps","userProfile","entyties","byId","console","log","user","answers","usersAnswers","id","dispatch","getAnswerListPending","getAnswerListSuccess","componentDidMount","location_state","location","userId","setState","getUserProfile","showUserItems","params","items","component","getQuestionListPending","getQuestionListSuccess","usersQuestions","getPostListPending","getPostListSuccess","usersPosts","getUserListPending","getUserListSuccess","usersFollowings","usersFollowers","close","history","push","pathToEditProfile","getProps","Object","assign","render","isLoading"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { ModalManager } from 'react-dynamic-modal';\n\nimport {PartalNavigationBar,NavigationBarBigScreen } from \"components/navBar\";\nimport  Helper from 'containers/utils/helpers';\nimport  * as action  from 'actions/actionCreators';\n\nimport { ProfileComponent, UserAnswers } from \"components/profile_components\";\n\nimport withMain  from 'containers/higher-order-components/main';\nimport {store} from \"index\";\n\nimport  AjaxLoader from \"components/ajax-loader\";\n\n\n\n\n\n\nclass ProfilePage extends Component {\n  constructor(props) {\n    super(props);\n   \n      this.state = {\n         userItemsComponent : UserAnswers,\n         isProfileBox       : true,\n         pageName           : \"Profile\", \n         profileById        : '',\n      } \n\n      this.redirectToEdit =  this.redirectToEdit.bind(this);\n    \n  }\n\n  componentWillMount() {   \n   \n  }\n\n   componentWillReceiveProps(nextProps, prevProps){ \n      var profileById = this.state.profileById;\n      const userProfile = nextProps.entyties.userProfile.byId[profileById];\n      \n      if (userProfile) {\n         console.log(userProfile)\n         let user   = userProfile.user; \n         var answers      = nextProps.entyties.answers;\n         if (user) {\n            console.log(user, usersAnswers)\n            var byId         =`usersAnswers${user.id}`;\n            answers          = answers.byId[byId]\n            var usersAnswers = userProfile.answers;\n            if (!answers) {\n               store.dispatch(action.getAnswerListPending(byId));\n               store.dispatch(action.getAnswerListSuccess(byId, usersAnswers));\n            }\n         }\n      }\n  }\n  \n  \n\n   componentDidMount() {\n      console.log(this.props)\n      let location_state = this.props.location.state;\n\n      if (location_state.userProfile) {\n         let userId    =   location_state.userProfile.id;\n         this.setState({profileById:`userProfile${userId}`});\n         this.props.getUserProfile(userId);\n      }\n   };\n   \n   showUserItems(params) {\n      let {items, component, byId } = params;\n      this.setState({userItemsComponent : component})\n      \n      switch(items){\n         case 'isUsersAnswers':\n            store.dispatch(action.getAnswerListPending(byId));\n            store.dispatch(action.getAnswerListSuccess(byId, params.usersAnswers));\n            return; \n         case 'isUsersQuestions':\n            store.dispatch(action.getQuestionListPending(byId));\n            store.dispatch(action.getQuestionListSuccess(byId, params.usersQuestions));\n            return;\n            \n         case 'isUsersPosts':\n            store.dispatch(action.getPostListPending(byId));\n            store.dispatch(action.getPostListSuccess(byId, params.usersPosts));\n           return;\n         \n         case 'isUsersFollowings':\n            store.dispatch(action.getUserListPending(byId));\n            store.dispatch(action.getUserListSuccess(byId, params.usersFollowings));\n            return;\n\n         case 'isUsersFollowers':\n            store.dispatch(action.getUserListPending(byId));\n            store.dispatch(action.getUserListSuccess(byId, params.usersFollowers));  \n            return;  \n      }\n   }\n\n   redirectToEdit(params){\n      ModalManager.close();\n      console.log(this.props)\n      this.props.history.push(params.pathToEditProfile, params.state)\n      \n   }    \n\n   getProps(){\n      let props = {\n         pageName           : this.state.pageName,\n         userItemsComponent : this.state.userItemsComponent,\n         showUserItems      : this.showUserItems.bind(this),\n         isProfileBox       : this.state.isProfileBox, \n         redirectToEdit     : this.redirectToEdit,\n         profileById        : this.state.profileById,\n      };\n      return Object.assign(props, this.props);\n   }\n  \n\n  \n   render() {\n      let   props = this.getProps();\n      var   profileById = props.profileById;\n      const userProfile = props.entyties.userProfile.byId[profileById];\n      \n          \n\n      return (\n         <div id=\"profile-page\">\n           <PartalNavigationBar {...props}/>\n           <NavigationBarBigScreen {...props} />\n            { userProfile?\n               <div>\n                  {userProfile.isLoading?\n                     <div className=\"page-spin-loder-box\">\n                        <AjaxLoader/>\n                     </div>\n                     : \n                     <ProfileComponent {...props}/> \n                  }\n               </div>\n               :\n               \"\"\n            }\n         </div>\n      );\n   };\n};\n\n\n\n\nexport default withMain(ProfilePage);\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}