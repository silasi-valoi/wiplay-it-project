{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/components/post_components.js\";\nimport React from 'react';\nimport { BrowserRouter, Link } from \"react-router-dom\";\nimport { MatchMediaHOC } from 'react-match-media';\nimport Api from 'api';\nimport { UpVotePostBtn, DownVotePostBtn, CommentBtn, OpenModalButton, QuestionOptDropDownBtn, PostOptDropDownBtns, PostOptModalBtns, ModalCloseBtn } from \"components/buttons\";\nimport * as types from 'actions/types';\nimport CommentsBox from \"containers/comment/comment_page\";\nimport { pageMediaBlockRenderer } from 'components/editor_components';\nimport { Editor, EditorState, convertFromRaw } from 'draft-js';\nimport { ButtonsBox, Styles } from \"components/partial_components\";\nimport { UserComponentSmall } from \"components/profile_components\";\nconst OptBtnSmallScreen = MatchMediaHOC(OpenModalButton, '(max-width: 500px)');\nconst OptBtnBigScreen = MatchMediaHOC(QuestionOptDropDownBtn, '(min-width: 800px)');\nconst api = new Api();\nexport const PostComponent = props => {\n  console.log(props);\n  let optionsBtnStyles = {\n    fontSize: '8px',\n    background: 'white',\n    fontWeight: 'bold',\n    width: '40px',\n    color: '#4A4A4A',\n    margin: '0 0 2px'\n  };\n  let post = props.post;\n  let storedState = JSON.parse(post.add_post);\n  const contentState = convertFromRaw(storedState);\n  const editorState = EditorState.createWithContent(contentState);\n  let postPath = \"/post/\".concat(post.slug, \"/\");\n  let pathToUpvoters = \"/post/\".concat(post.id, \"/upvotes/\");\n  let state = {\n    currentUser: props.currentUser,\n    post: post\n  };\n  let modalOptionsProps = {\n    modalProps: {\n      objName: 'post',\n      actionType: types.UPDATE_POST,\n      isPut: true,\n      obj: props.post\n    },\n    modalType: 'optionsMenu'\n  };\n  let upvoteBtnProps = {\n    objName: 'post',\n    actionType: types.UPDATE_POST,\n    isPut: true,\n    obj: post,\n    objId: post.id,\n    objIndex: props.index,\n    apiUrl: api.updatePostApi(post.id),\n    byId: props.postById\n  };\n  let createCommentProps = {\n    modalProps: {\n      objName: 'comment',\n      actionType: types.CREATE_COMMENT,\n      obj: post,\n      objId: post.id,\n      isPost: true,\n      editorPlaceHolder: 'Add Comment...',\n      apiUrl: api.createPostCommentApi(post.id)\n    },\n    modalType: 'editor'\n  };\n  let btnsProps = {\n    createCommentProps,\n    upvoteBtnProps,\n    modalOptionsProps,\n    btnStyles: optionsBtnStyles,\n    btnText: React.createElement(\"i\", {\n      className: \"material-icons \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"more_horiz\")\n  };\n  Object.assign(btnsProps, props);\n  let itemsCounter = React.createElement(Link, {\n    to: {\n      pathname: pathToUpvoters,\n      state\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, post.upvotes, \"  Upvotes\");\n  let btn1 = post.upvoted ? React.createElement(DownVotePostBtn, Object.assign({}, btnsProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })) : React.createElement(UpVotePostBtn, Object.assign({}, btnsProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }));\n  let btn2 = React.createElement(CommentBtn, Object.assign({}, btnsProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n  let optionsBtn = React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(OptBtnSmallScreen, Object.assign({}, btnsProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(OptBtnBigScreen, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })));\n  const btnsList = {\n    itemsCounter: itemsCounter,\n    btn1: btn1,\n    btn2: btn2,\n    btn3: optionsBtn,\n    Styles: Styles\n  };\n  const userProps = {\n    user: props.post.created_by,\n    currentUser: props.currentUser\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-contents\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"user-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(UserComponentSmall, Object.assign({}, userProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }))), props.isPostBox ? React.createElement(\"b\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, post.add_title) : React.createElement(\"b\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: {\n      pathname: postPath,\n      state\n    },\n    className: \"question-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, post.add_title))), React.createElement(\"div\", {\n    className: \"post-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Editor, {\n    blockRendererFn: pageMediaBlockRenderer,\n    editorState: editorState,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), React.createElement(ButtonsBox, Object.assign({}, btnsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }))), React.createElement(CommentsBox, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }))));\n};\nexport const PostPageComponent = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-contents\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, props.isPostBox ? React.createElement(\"b\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, props.post.add_title) : React.createElement(\"b\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: {\n      pathname: props.postPath,\n      state: props.state\n    },\n    className: \"question-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, props.post.add_title))), React.createElement(\"div\", {\n    className: \"post-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(Editor, {\n    blockRendererFn: pageMediaBlockRenderer,\n    editorState: props.editorState,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  })), React.createElement(ButtonsBox, Object.assign({}, props.btnsProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }))), React.createElement(CommentsBox, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }))));\n};\nexport const PostListComponent = props => {\n  return React.createElement(\"div\", {\n    className: \"post-list-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-list-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"post-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(Editor, {\n    blockRendererFn: pageMediaBlockRenderer,\n    editorState: props.editorState,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  })), React.createElement(ButtonsBox, Object.assign({}, props.btnsProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }))), React.createElement(CommentsBox, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }))));\n};\nexport const UserPost = props => {\n  console.log(props);\n  return React.createElement(\"div\", {\n    className: \"post-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: {\n      pathname: props.postPath,\n      state: props.state\n    },\n    className: \"question-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, props.post.add_title))), React.createElement(\"div\", {\n    className: \"post-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, React.createElement(Editor, {\n    blockRendererFn: pageMediaBlockRenderer,\n    editorState: props.editorState,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  })), React.createElement(ButtonsBox, Object.assign({}, props.btnsProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }))));\n};\nexport const PostDropDownMenu = props => React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 271\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 272\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  className: \"btn-sm post-option options-btn \",\n  id: \"postMenuButton\",\n  \"data-toggle\": \"dropdown\",\n  \"aria-haspopup\": \"false\",\n  \"aria-expanded\": \"true\",\n  type: \"button\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 273\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  className: \"material-icons \",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 275\n  },\n  __self: this\n}, \"more_horiz\")), React.createElement(\"div\", {\n  className: \"dropdown-menu\",\n  \"aria-labelledby\": \"postMenuButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 277\n  },\n  __self: this\n}, React.createElement(PostOptDropDownBtns, Object.assign({}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 278\n  },\n  __self: this\n})))));\nexport const PostModalMenu = props => React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 286\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: \"modal-menu  modal-body\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 287\n  },\n  __self: this\n}, React.createElement(ModalCloseBtn, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 288\n  },\n  __self: this\n}), React.createElement(PostOptModalBtns, Object.assign({}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 289\n  },\n  __self: this\n}))));","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/components/post_components.js"],"names":["React","BrowserRouter","Link","MatchMediaHOC","Api","UpVotePostBtn","DownVotePostBtn","CommentBtn","OpenModalButton","QuestionOptDropDownBtn","PostOptDropDownBtns","PostOptModalBtns","ModalCloseBtn","types","CommentsBox","pageMediaBlockRenderer","Editor","EditorState","convertFromRaw","ButtonsBox","Styles","UserComponentSmall","OptBtnSmallScreen","OptBtnBigScreen","api","PostComponent","props","console","log","optionsBtnStyles","fontSize","background","fontWeight","width","color","margin","post","storedState","JSON","parse","add_post","contentState","editorState","createWithContent","postPath","slug","pathToUpvoters","id","state","currentUser","modalOptionsProps","modalProps","objName","actionType","UPDATE_POST","isPut","obj","modalType","upvoteBtnProps","objId","objIndex","index","apiUrl","updatePostApi","byId","postById","createCommentProps","CREATE_COMMENT","isPost","editorPlaceHolder","createPostCommentApi","btnsProps","btnStyles","btnText","Object","assign","itemsCounter","pathname","upvotes","btn1","upvoted","btn2","optionsBtn","btnsList","btn3","userProps","user","created_by","isPostBox","add_title","PostPageComponent","PostListComponent","UserPost","PostDropDownMenu","PostModalMenu"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { BrowserRouter, Link } from \"react-router-dom\";\nimport { MatchMediaHOC } from 'react-match-media';\nimport Api from 'api';\n\nimport {UpVotePostBtn,DownVotePostBtn, CommentBtn,\n         OpenModalButton, QuestionOptDropDownBtn,PostOptDropDownBtns,\n        PostOptModalBtns, ModalCloseBtn  } from \"components/buttons\"\nimport  * as types  from 'actions/types';\n\n\nimport CommentsBox from \"containers/comment/comment_page\";\nimport {pageMediaBlockRenderer} from 'components/editor_components';\nimport {Editor,EditorState, convertFromRaw} from 'draft-js';\nimport {ButtonsBox,Styles} from \"components/partial_components\";\n\nimport { UserComponentSmall } from \"components/profile_components\";\n\n\n\n\n\nconst OptBtnSmallScreen = MatchMediaHOC(OpenModalButton, '(max-width: 500px)');\nconst OptBtnBigScreen   = MatchMediaHOC(QuestionOptDropDownBtn, '(min-width: 800px)');\nconst api      = new Api();\n\n\n\n\nexport const PostComponent = props => {\n   console.log(props)\n   let optionsBtnStyles = {\n              fontSize   : '8px',\n              background : 'white',\n              fontWeight : 'bold',\n              width      : '40px',\n              color      : '#4A4A4A',\n              margin     : '0 0 2px'\n   }\n\n   let post     =    props.post;\n\n   let   storedState    = JSON.parse(post.add_post);\n   const contentState   = convertFromRaw(storedState);\n   const editorState    = EditorState.createWithContent(contentState);\n   let   postPath       = `/post/${post.slug}/`;\n   let   pathToUpvoters =  `/post/${post.id}/upvotes/`;\n   let   state          = {currentUser : props.currentUser,post : post,};\n   \n   let  modalOptionsProps = {\n      modalProps : {\n        objName    : 'post',\n        actionType : types.UPDATE_POST,\n        isPut      : true,\n        obj        : props.post, \n        \n      },\n      modalType : 'optionsMenu', \n   };\n   \n   let upvoteBtnProps = {\n      objName     : 'post',\n      actionType  : types.UPDATE_POST,\n      isPut       : true,\n      obj         : post, \n      objId       : post.id,\n      objIndex    : props.index,\n      apiUrl      : api.updatePostApi(post.id),\n      byId        : props.postById,\n   };\n   \n   let  createCommentProps = {\n      modalProps : {\n        objName           : 'comment',\n        actionType        : types.CREATE_COMMENT,\n        obj               : post,\n        objId             : post.id,\n        isPost            : true,\n        editorPlaceHolder : 'Add Comment...',\n        apiUrl            : api.createPostCommentApi(post.id),\n         \n      },\n      modalType : 'editor', \n          \n   };\n\n   let btnsProps = {\n         createCommentProps,\n         upvoteBtnProps,\n         modalOptionsProps,\n         btnStyles:optionsBtnStyles,\n         btnText : <i className=\"material-icons \">more_horiz</i>, \n      }; \n\n   Object.assign(btnsProps, props)\n   let itemsCounter = <Link to={{pathname:pathToUpvoters,state }}>\n                         { post.upvotes }  Upvotes\n                     </Link>;\n\n   let btn1 =  post.upvoted? <DownVotePostBtn {...btnsProps}/>\n               : <UpVotePostBtn {...btnsProps}/>\n\n   let btn2 =  <CommentBtn {...btnsProps}/>;\n                         \n              \n   let optionsBtn =  <div>\n                        <OptBtnSmallScreen {...btnsProps}/> \n                        <OptBtnBigScreen {...props}/>\n                     </div>;\n\n   const btnsList   = { \n            itemsCounter : itemsCounter,\n            btn1   : btn1,\n            btn2   : btn2,\n            btn3   : optionsBtn,\n            Styles : Styles\n         };\n\n   const userProps  = {\n              user        : props.post.created_by,\n              currentUser : props.currentUser,\n            };\n  \n\n    return (\n      <div>\n          <div className=\"post-contents\">\n            <div className=\"post-box\">\n               <div className=\"post\"> \n                 <div className=\"user-box\">\n                    <UserComponentSmall {...userProps}\n                    />\n           \n                  </div>\n\n                  { props.isPostBox? \n                     <b className=\"\">\n                        { post.add_title }\n                  \n                     </b>\n                     :\n\n                     <b className=\"\">\n                        <Link to={{pathname: postPath, state }} className=\"question-link\">\n                           { post.add_title }\n                        </Link>\n                     </b>\n                  }\n\n                  </div>\n                  <div className=\"post-body\">\n                     <Editor\n                        blockRendererFn={pageMediaBlockRenderer}\n                        editorState={editorState} \n                        readOnly={true} \n                     />\n                  </div>\n                  <ButtonsBox {...btnsList}/>\n               </div>\n            <CommentsBox {...props}/>\n          </div>\n      </div>\n    );\n\n};\n\n\n\nexport const PostPageComponent = props => {\n\n   return (\n      <div>\n         <div className=\"post-contents\">\n            <div className=\"post-box\">\n               <div className=\"post\"> \n\n                  { props.isPostBox? \n                     <b className=\"\">\n                        { props.post.add_title }\n                  \n                     </b>\n                     :\n\n                     <b className=\"\">\n                        <Link to={{ pathname : props.postPath, state : props.state }} className=\"question-link\">\n                           { props.post.add_title }\n                        </Link>\n                     </b>\n                  }\n               </div>\n\n               <div className=\"post-body\">\n                  <Editor\n                     blockRendererFn={pageMediaBlockRenderer}\n                     editorState={props.editorState} \n                     readOnly={true} \n                  />\n               </div>\n                  <ButtonsBox {...props.btnsProps}/>\n            </div>\n            <CommentsBox {...props}/>\n         </div>\n      </div>\n   );\n}; \n\n\nexport const PostListComponent = props => {\n\n  return (\n      <div className=\"post-list-page\">\n         <div className=\"post-list-content\">\n            <div className=\"post-box\">\n               <div className=\"post\">  \n               </div>\n               <div className=\"post-body\">\n                  <Editor\n                     blockRendererFn={pageMediaBlockRenderer}\n                     editorState={props.editorState} \n                     readOnly={true} \n                  />\n               </div>\n    \n            <ButtonsBox {...props.btnsProps}/>\n         </div>\n         <CommentsBox {...props}/>\n      \n      </div>\n      </div>\n\n   );\n}; \n\n\n\n\n\n\n\nexport const UserPost = props => {\n  console.log(props)\n  return (\n\n      <div className=\"post-content\">\n         <div className=\"post-box\">\n\n            <div className=\"post\">  \n               <b className=\"\">\n                  <Link to={{pathname: props.postPath, state:props.state }} className=\"question-link\">\n                     { props.post.add_title }\n                  </Link>\n               </b>\n            </div>\n\n             <div className=\"post-body\">\n               <Editor\n                  blockRendererFn={pageMediaBlockRenderer}\n                  editorState={props.editorState} \n                  readOnly={true} \n               />\n            </div>\n            <ButtonsBox {...props.btnsProps}/>\n         </div>\n      \n      </div>\n\n   );\n}; \n\nexport const PostDropDownMenu = props => (\n  <BrowserRouter>\n  <div>\n   <button className=\"btn-sm post-option options-btn \" id=\"postMenuButton\"\n      data-toggle=\"dropdown\" aria-haspopup=\"false\" aria-expanded=\"true\" type=\"button\" >\n      <i className=\"material-icons \">more_horiz</i>\n    </button>\n  <div className=\"dropdown-menu\" aria-labelledby=\"postMenuButton\">\n    <PostOptDropDownBtns {...props} />\n  </div>\n  </div>\n  </BrowserRouter>\n \n)\n\nexport const PostModalMenu = props => (\n   <BrowserRouter>\n    <div className=\"modal-menu  modal-body\">\n      <ModalCloseBtn/>\n      <PostOptModalBtns {...props} />      \n   </div>\n   </BrowserRouter>\n) \n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}