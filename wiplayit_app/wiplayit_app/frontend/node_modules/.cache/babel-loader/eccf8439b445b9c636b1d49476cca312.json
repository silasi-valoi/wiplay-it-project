{"ast":null,"code":"import { convertToRaw } from 'draft-js';\nexport default class Helper {\n  downVote(self, context) {\n    let upvotes = context.obj.upvotes - 1;\n    var formData = this.createFormData({\n      upvotes\n    });\n    return formData;\n  }\n\n  upVote(self, context) {\n    let upvotes = context.obj.upvotes + 1;\n    context['formData'] = this.createFormData({\n      upvotes\n    });\n    return this.sendRequest(self, context);\n  }\n\n  unFollow(self, context) {\n    let followers = context.obj.followers - 1;\n    context['formData'] = this.createFormData({\n      followers\n    });\n    this.sendRequest(self, context);\n  }\n\n  follow(self, context) {\n    let followers = context.obj.followers + 1;\n    context['formData'] = this.createFormData({\n      followers\n    });\n    this.sendRequest(self, context);\n  }\n\n  updateReducerListEntynties(listItems, obj) {\n    listItems.map((item, index) => {\n      if (item.id === obj.id) {\n        Object.assign(listItems[index], obj);\n      }\n\n      return listItems;\n    });\n    return listItems;\n  }\n\n  createFormData(data) {\n    var formData = new FormData();\n\n    if (data) {\n      for (var key in data) {\n        formData.append(key, data[key]);\n      }\n    }\n\n    return formData;\n  }\n\n  _blockText(form) {\n    let blocks = form.blocks;\n    let blockText = \"\";\n\n    for (var i = blocks.length - 1; i >= 0; i--) {\n      console.log(blocks[i].text);\n      let text = blocks[i].text;\n\n      if (!/^ *$/.test(text)) {\n        console.log(text);\n        blockText = text;\n      } else {\n        console.log(blocks[i].text);\n        blockText = \"\";\n      }\n    }\n\n    return blockText;\n  }\n\n  validateForm(params) {\n    let validatedForm = {};\n    console.log(params.form);\n\n    if (params.editorContents) {\n      let form = convertToRaw(params.editorContents);\n      let entityMap = Object.keys(form.entityMap);\n\n      let blockText = this._blockText(form);\n\n      if (blockText !== \"\" || entityMap.length) {\n        validatedForm = {\n          data: JSON.stringify(form),\n          formIsValid: true\n        };\n      } else {\n        validatedForm = {\n          formHasErrors: true,\n          formIsValid: false,\n          errors: \"Form is Empty\"\n        };\n      }\n    } else if (params.form) {\n      let textarea = params.form.textarea;\n\n      if (/^ *$/.test(textarea)) {\n        //If textarea field is empty? Return form errors\n        validatedForm = {\n          formHasErrors: true,\n          formIsValid: false,\n          errors: \"Form is Empty\"\n        };\n      } else {\n        validatedForm = {\n          data: params.form.textarea,\n          formIsValid: true,\n          formHasErrors: false\n        };\n      }\n    }\n\n    return validatedForm;\n  }\n\n}\n;","map":{"version":3,"sources":["/home/silasi/Deprojectos/python_projects/wiplay-it-backend/backend/wiplay-it-web-frontend/src/containers/utils/helpers.js"],"names":["convertToRaw","Helper","downVote","self","context","upvotes","obj","formData","createFormData","upVote","sendRequest","unFollow","followers","follow","updateReducerListEntynties","listItems","map","item","index","id","Object","assign","data","FormData","key","append","_blockText","form","blocks","blockText","i","length","console","log","text","test","validateForm","params","validatedForm","editorContents","entityMap","keys","JSON","stringify","formIsValid","formHasErrors","errors","textarea"],"mappings":"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","sourcesContent":["\nimport {convertToRaw} from 'draft-js';\n\n\n\nexport default class Helper {\n\n   downVote(self,context ) {\n      let upvotes     =   context.obj.upvotes  - 1;\n      var formData    =   this.createFormData({upvotes});\n      return formData;\n   }\n\n\n   upVote(self , context ) {\n      let upvotes         =   context.obj.upvotes + 1;\n      context['formData'] =  this.createFormData({upvotes});\n      return this.sendRequest(self, context);\n   }\n\n\n   unFollow(self, context) {\n      let followers       =  context.obj.followers - 1;\n      context['formData'] =  this.createFormData({followers});\n      this.sendRequest(self, context); \n   }\n\n\n    follow(self,context) {\n        let followers = context.obj.followers + 1;\n        context['formData'] =  this.createFormData({followers});\n        this.sendRequest(self, context); \n    }\n\n\n\n    updateReducerListEntynties(listItems, obj) {\n      \n        listItems.map(( item, index) => {\n            if (item.id  === obj.id) {\n                Object.assign(listItems[index], obj)\n            }\n            return listItems;\n        });\n\n        return listItems;\n    }\n      \n   createFormData(data ) {\n      var formData    =   new FormData();\n\n      if (data) {\n         for (var key in data){\n            formData.append(key, data[key]);\n         }\n      }\n\n      return formData;\n   };\n\n    _blockText(form) {\n        let blocks    =  form.blocks;\n        let blockText     =  \"\";    \n\n        for (var i = blocks.length - 1; i >= 0; i--) {\n           console.log(blocks[i].text)\n           let text = blocks[i].text;\n\n            if (! /^ *$/.test(text)) {\n                console.log(text)\n                blockText = text;  \n            }\n            else{\n                console.log(blocks[i].text)\n                blockText = \"\";\n            }\n        }\n\n        return blockText;\n    };\n\n    validateForm(params){\n        let validatedForm = {};\n        console.log(params.form)\n\n        if (params.editorContents) {\n            let form      = convertToRaw(params.editorContents);\n            let entityMap = Object.keys(form.entityMap);\n            let blockText =   this._blockText(form);\n                  \n            if (blockText !== \"\" || entityMap.length) {\n                validatedForm = {data: JSON.stringify(form),formIsValid : true,}\n            }\n\n            else{\n                validatedForm = {\n                   formHasErrors : true,\n                   formIsValid   : false,\n                   errors        : \"Form is Empty\",\n               }\n            } \n        }\n\n        else if(params.form){\n            let textarea = params.form.textarea;\n            if (/^ *$/.test(textarea)) {\n                //If textarea field is empty? Return form errors\n\n                validatedForm = {\n                    formHasErrors : true,\n                    formIsValid   : false,\n                    errors        : \"Form is Empty\",\n                }\n            }\n            else {\n                validatedForm = {\n                    data          : params.form.textarea,\n                    formIsValid   : true,\n                    formHasErrors : false\n                }\n            }\n        }\n\n        return validatedForm; \n    }\n\n};\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}