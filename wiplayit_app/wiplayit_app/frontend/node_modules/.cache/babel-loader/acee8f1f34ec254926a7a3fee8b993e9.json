{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/authentication/index.js\";\nimport React from 'react'; //import {DefaultWrongPage} from \"components/partial_components\"\n\nimport Axios from 'axios_instance';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport * as action from 'actions/actionCreators';\nimport { store } from 'index';\nimport Api from 'api'; //import Helper from 'containers/utils/helpers';\n//const helper   = new Helper();\n\nconst api = new Api();\nexport function withAuthentication(Component) {\n  var _temp;\n\n  return _temp = class Authentication extends React.Component {\n    constructor(_props) {\n      super(_props);\n\n      this.onStoreUpdate = () => {};\n\n      this.responseTwitter = response => {\n        console.log(response); //var accessToken =  response.accessToken\n        //var apiUrl =  api.twitterLoginApi(this)\n        //this.socialLogin(apiUrl, accessToken)\n      };\n\n      this.responseGoogle = response => {\n        console.log(response); //var accessToken =  response.accessToken\n        //var apiUrl =  api.googleLoginApi(this)\n        //this.socialLogin(apiUrl, accessToken)\n      };\n\n      this.toggleSignUpForm = props => {\n        console.log(props);\n        console.log(props, this.props);\n        this.props.toggleSignUp(props);\n        this.forceUpdate();\n      };\n\n      this.togglePasswordResetForm = props => {\n        console.log(props, this.props);\n        this.props.togglePasswordReset(props);\n        this.forceUpdate();\n      };\n\n      this.getAuthUrl = formValues => {\n        if (formValues.email && formValues.password && !formValues.password2 && !formValues.first_name) {\n          return api.logginUser();\n        } else if (formValues.first_name && formValues.last_name) {\n          return api.createUser();\n        } else if (formValues.password2 && formValues.password1) {\n          return api.passwordChangeApi();\n        } else {\n          return api.passwordResetApi();\n        }\n      };\n\n      this.onSubmit = (values, dispatch) => {\n        const axiosApi = new Axios(false);\n        let apiUrl = this.getAuthUrl(values);\n        const instance = axiosApi.axiosInstance();\n        store.dispatch(action.authenticationPending());\n        alert(instance);\n        return instance.post(apiUrl, values).then(response => dispatch(action.authenticationSuccess(response.data))).catch(error => {\n          if (error.response && error.response.data) {\n            dispatch(action.authenticationError(error.response.data));\n          } else if (error.request) {\n            alert(apiUrl);\n            dispatch(action.handleError());\n          }\n        });\n      };\n\n      this.state = {\n        isAuthenticated: false\n      };\n      this.onSubmit = this.onSubmit.bind(this);\n      this.responseFacebook = this.responseFacebook.bind(this);\n      this.responseTwitter = this.responseTwitter.bind(this);\n      this.responseGoogle = this.responseGoogle.bind(this);\n    }\n\n    isAuthenticated() {\n      let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n      console.log(cachedEntyties);\n\n      if (cachedEntyties) {\n        let auth = cachedEntyties.auth;\n\n        if (auth && auth.isLoggedIn) {\n          this.props.history.push('/');\n          this.props.forceUpdate();\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    Redirect() {\n      let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n      if (cachedEntyties) {\n        let auth = cachedEntyties.auth; //store.dispatch(getCurrentUser(auth.tokenKey));\n\n        let currentUser = cachedEntyties.currentUser;\n\n        if (!currentUser) {\n          // store.dispatch(getCurrentUser(auth.tokenKey));\n          console.log(auth);\n        }\n\n        if (auth && auth.isLoggedIn) {\n          this.props.history.push('/');\n        }\n      }\n    }\n\n    responseFacebook(response) {\n      //console.log(response.accessToken);\n      var accessToken = response.accessToken;\n      var formData = new FormData();\n      console.log(accessToken);\n      formData.append(\"access_token\", accessToken); //var apiUrl =  api.facebookLoginApi(this)\n    }\n\n    componentDidUpdate(nextProps, prevState) {\n      console.log(nextProps, prevState);\n    }\n\n    componentDidMount() {\n      const onStoreChange = () => {\n        let onStoreUpdate = store.getState();\n        var userAuth = onStoreUpdate.entyties.userAuth;\n        console.log(userAuth, onStoreUpdate);\n\n        if (userAuth && userAuth.auth && userAuth.auth.isLoggedIn) {\n          //console.log(userAuth.auth)\n          this.Redirect();\n        }\n      };\n\n      this.unsubscribe = store.subscribe(onStoreChange);\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    componentWillReceiveProps(nextProps) {\n      console.log(nextProps);\n      /*\n      let  userAuth = store.getState().userAuth;\n      let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n       console.log(cachedEntyties, userAuth)\n       let { currentUser }  = cachedEntyties;\n       if (userAuth.auth.isLoggedIn && !currentUser) {\n      let isOnStorage = localStorage.getItem('auth' )?true : false;\n       if (isOnStorage) {\n         let auth = JSON.parse(localStorage.getItem('auth'))\n         store.dispatch(getCurrentUser(auth.tokenKey));\n         currentUser = localStorage.getItem('currentUser')?true:false;\n           if (currentUser) {\n              setTimeout( () => {\n               this.props.history.push('/');\n               this.setState({isAuthenticated:currentUser })\n            }, 100);\n              }\n          }\n      }    */\n    }\n\n    getProps() {\n      let props = {\n        onSubmit: this.onSubmit,\n        responseFacebook: this.responseFacebook,\n        responseGoogle: this.responseGoogle,\n        responseTwitter: this.responseTwitter,\n        togglePasswordResetForm: this.togglePasswordResetForm,\n        toggleSignUpForm: this.toggleSignUpForm\n      };\n      return Object.assign(props, this.props);\n    }\n\n    render() {\n      let props = this.getProps();\n      console.log(props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }))));\n    }\n\n  }, _temp;\n}\n; //binds on `props` change\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    togglePasswordReset: (self, props) => dispatch(action.togglePasswordResetForm(self, props)),\n    toggleSignUp: (self, props) => dispatch(action.toggleSignUpForm(self, props))\n  };\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    userAuth: state.entyties.userAuth\n  };\n};\n\nconst composedHoc = compose(connect(mapStateToProps, mapDispatchToProps), withAuthentication);\nexport default composedHoc;","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/authentication/index.js"],"names":["React","Axios","connect","compose","action","store","Api","api","withAuthentication","Component","Authentication","constructor","props","onStoreUpdate","responseTwitter","response","console","log","responseGoogle","toggleSignUpForm","toggleSignUp","forceUpdate","togglePasswordResetForm","togglePasswordReset","getAuthUrl","formValues","email","password","password2","first_name","logginUser","last_name","createUser","password1","passwordChangeApi","passwordResetApi","onSubmit","values","dispatch","axiosApi","apiUrl","instance","axiosInstance","authenticationPending","alert","post","then","authenticationSuccess","data","catch","error","authenticationError","request","handleError","state","isAuthenticated","bind","responseFacebook","cachedEntyties","JSON","parse","localStorage","getItem","auth","isLoggedIn","history","push","Redirect","currentUser","accessToken","formData","FormData","append","componentDidUpdate","nextProps","prevState","componentDidMount","onStoreChange","getState","userAuth","entyties","unsubscribe","subscribe","componentWillUnmount","componentWillReceiveProps","getProps","Object","assign","render","mapDispatchToProps","ownProps","self","mapStateToProps","composedHoc"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,OAAQ,KAAKC,MAAb,MAA0B,wBAA1B;AAEA,SAASC,KAAT,QAAsB,OAAtB;AACA,OAAOC,GAAP,MAAgB,KAAhB,C,CACA;AAGA;;AACA,MAAMC,GAAG,GAAG,IAAID,GAAJ,EAAZ;AAMA,OAAO,SAASE,kBAAT,CAA4BC,SAA5B,EAAuC;AAAA;;AAE1C,iBAAO,MAAMC,cAAN,SAA6BV,KAAK,CAACS,SAAnC,CAA6C;AAEhDE,IAAAA,WAAW,CAACC,MAAD,EAAQ;AACf,YAAMA,MAAN;;AADe,WAkEnBC,aAlEmB,GAkEH,MAAK,CAEpB,CApEkB;;AAAA,WA+HnBC,eA/HmB,GA+HAC,QAAD,IAAc;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAD4B,CAE5B;AACA;AACD;AACF,OApIkB;;AAAA,WAuInBG,cAvImB,GAuIDH,QAAD,IAAa;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAD2B,CAE3B;AACA;AACA;AACF,OA5IkB;;AAAA,WA8InBI,gBA9ImB,GA8ICP,KAAD,IAAS;AACzBI,QAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAAmB,KAAKA,KAAxB;AACA,aAAKA,KAAL,CAAWQ,YAAX,CAAwBR,KAAxB;AACA,aAAKS,WAAL;AACF,OAnJkB;;AAAA,WAqJnBC,uBArJmB,GAqJQV,KAAD,IAAS;AAChCI,QAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAAmB,KAAKA,KAAxB;AACA,aAAKA,KAAL,CAAWW,mBAAX,CAA+BX,KAA/B;AACA,aAAKS,WAAL;AACF,OAzJkB;;AAAA,WA4JnBG,UA5JmB,GA4JLC,UAAD,IAAc;AAEvB,YAAIA,UAAU,CAACC,KAAX,IAAoBD,UAAU,CAACE,QAA/B,IACA,CAACF,UAAU,CAACG,SADZ,IACyB,CAACH,UAAU,CAACI,UADzC,EACoD;AAEnD,iBAAOtB,GAAG,CAACuB,UAAJ,EAAP;AACA,SAJD,MAMK,IAAIL,UAAU,CAACI,UAAX,IAAyBJ,UAAU,CAACM,SAAxC,EAAkD;AACtD,iBAAOxB,GAAG,CAACyB,UAAJ,EAAP;AACA,SAFI,MAIA,IAAIP,UAAU,CAACG,SAAX,IAAwBH,UAAU,CAACQ,SAAvC,EAAiD;AACrD,iBAAO1B,GAAG,CAAC2B,iBAAJ,EAAP;AACA,SAFI,MAID;AACA,iBAAQ3B,GAAG,CAAC4B,gBAAJ,EAAR;AACN;AACD,OA/KkB;;AAAA,WAiLnBC,QAjLmB,GAiLR,CAACC,MAAD,EAASC,QAAT,KAAsB;AAC7B,cAAMC,QAAQ,GAAG,IAAItC,KAAJ,CAAU,KAAV,CAAjB;AACA,YAAIuC,MAAM,GAAI,KAAKhB,UAAL,CAAgBa,MAAhB,CAAd;AAEA,cAAMI,QAAQ,GAAGF,QAAQ,CAACG,aAAT,EAAjB;AACArC,QAAAA,KAAK,CAACiC,QAAN,CAAelC,MAAM,CAACuC,qBAAP,EAAf;AACAC,QAAAA,KAAK,CAACH,QAAD,CAAL;AAEA,eAAQA,QAAQ,CAACI,IAAT,CAAcL,MAAd,EAAsBH,MAAtB,EACHS,IADG,CACE/B,QAAQ,IAAIuB,QAAQ,CAAClC,MAAM,CAAC2C,qBAAP,CAA6BhC,QAAQ,CAACiC,IAAtC,CAAD,CADtB,EAEHC,KAFG,CAEGC,KAAK,IAAG;AAEf,cAAIA,KAAK,CAACnC,QAAN,IAAkBmC,KAAK,CAACnC,QAAN,CAAeiC,IAArC,EAA2C;AACvCV,YAAAA,QAAQ,CAAClC,MAAM,CAAC+C,mBAAP,CAA2BD,KAAK,CAACnC,QAAN,CAAeiC,IAA1C,CAAD,CAAR;AACH,WAFD,MAGK,IAAIE,KAAK,CAACE,OAAV,EAAmB;AACpBR,YAAAA,KAAK,CAACJ,MAAD,CAAL;AACAF,YAAAA,QAAQ,CAAClC,MAAM,CAACiD,WAAP,EAAD,CAAR;AACH;AACJ,SAXO,CAAR;AAYH,OArMkB;;AAEf,WAAKC,KAAL,GAAa;AACbC,QAAAA,eAAe,EAAG;AADL,OAAb;AAIA,WAAKnB,QAAL,GAA2B,KAAKA,QAAL,CAAcoB,IAAd,CAAmB,IAAnB,CAA3B;AACA,WAAKC,gBAAL,GAA2B,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAA3B;AACA,WAAK1C,eAAL,GAA2B,KAAKA,eAAL,CAAqB0C,IAArB,CAA0B,IAA1B,CAA3B;AACA,WAAKtC,cAAL,GAA2B,KAAKA,cAAL,CAAoBsC,IAApB,CAAyB,IAAzB,CAA3B;AACH;;AAGDD,IAAAA,eAAe,GAAG;AACd,UAAIG,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAX,CAArB;AACA9C,MAAAA,OAAO,CAACC,GAAR,CAAYyC,cAAZ;;AAEA,UAAIA,cAAJ,EAAmB;AAAA,YACTK,IADS,GACCL,cADD,CACTK,IADS;;AAGf,YAAIA,IAAI,IAAIA,IAAI,CAACC,UAAjB,EAA4B;AACxB,eAAKpD,KAAL,CAAWqD,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AAEA,eAAKtD,KAAL,CAAWS,WAAX;AACA,iBAAO,IAAP;AACH;AACJ;;AAED,aAAO,KAAP;AACH;;AAED8C,IAAAA,QAAQ,GAAE;AACN,UAAIT,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAX,CAArB;;AAEA,UAAIJ,cAAJ,EAAmB;AAAA,YAETK,IAFS,GAECL,cAFD,CAETK,IAFS,EAGf;;AAHe,YAKVK,WALU,GAKKV,cALL,CAKVU,WALU;;AAOf,YAAG,CAACA,WAAJ,EAAgB;AACb;AACApD,UAAAA,OAAO,CAACC,GAAR,CAAY8C,IAAZ;AAEF;;AAED,YAAIA,IAAI,IAAIA,IAAI,CAACC,UAAjB,EAA4B;AACxB,eAAKpD,KAAL,CAAWqD,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH;AACJ;AACJ;;AAEDT,IAAAA,gBAAgB,CAAC1C,QAAD,EAAW;AACxB;AACA,UAAIsD,WAAW,GAAItD,QAAQ,CAACsD,WAA5B;AACA,UAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAvD,MAAAA,OAAO,CAACC,GAAR,CAAYoD,WAAZ;AAEAC,MAAAA,QAAQ,CAACE,MAAT,CAAgB,cAAhB,EAA+BH,WAA/B,EANwB,CAQxB;AAEF;;AAQDI,IAAAA,kBAAkB,CAACC,SAAD,EAAaC,SAAb,EAAuB;AACrC3D,MAAAA,OAAO,CAACC,GAAR,CAAYyD,SAAZ,EAAuBC,SAAvB;AACJ;;AAGAC,IAAAA,iBAAiB,GAAG;AAChB,YAAMC,aAAa,GAAG,MAAM;AACxB,YAAKhE,aAAa,GAAGR,KAAK,CAACyE,QAAN,EAArB;AACA,YAAIC,QAAQ,GAAGlE,aAAa,CAACmE,QAAd,CAAuBD,QAAtC;AACA/D,QAAAA,OAAO,CAACC,GAAR,CAAY8D,QAAZ,EAAsBlE,aAAtB;;AAEA,YAAGkE,QAAQ,IAAIA,QAAQ,CAAChB,IAArB,IAA6BgB,QAAQ,CAAChB,IAAT,CAAcC,UAA9C,EAAyD;AACtD;AACA,eAAKG,QAAL;AACF;AACJ,OATD;;AAWA,WAAKc,WAAL,GAAmB5E,KAAK,CAAC6E,SAAN,CAAgBL,aAAhB,CAAnB;AAEH;;AAGDM,IAAAA,oBAAoB,GAAG;AACnB,WAAKF,WAAL;AAEH;;AAGDG,IAAAA,yBAAyB,CAACV,SAAD,EAAW;AAChC1D,MAAAA,OAAO,CAACC,GAAR,CAAYyD,SAAZ;AACA;;;;;;;;;;;;;;;;;;;AAwBH;;AA0EDW,IAAAA,QAAQ,GAAG;AACP,UAAKzE,KAAK,GAAG;AACTwB,QAAAA,QAAQ,EAAG,KAAKA,QADP;AAETqB,QAAAA,gBAAgB,EAAU,KAAKA,gBAFtB;AAGTvC,QAAAA,cAAc,EAAY,KAAKA,cAHtB;AAITJ,QAAAA,eAAe,EAAW,KAAKA,eAJtB;AAKTQ,QAAAA,uBAAuB,EAAG,KAAKA,uBALtB;AAMTH,QAAAA,gBAAgB,EAAU,KAAKA;AANtB,OAAb;AASA,aAAOmE,MAAM,CAACC,MAAP,CAAc3E,KAAd,EAAqB,KAAKA,KAA1B,CAAP;AACH;;AAGD4E,IAAAA,MAAM,GAAG;AACL,UAAI5E,KAAK,GAAG,KAAKyE,QAAL,EAAZ;AACArE,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEA,aACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADD,CADL,CADH;AAOH;;AAlO+C,GAApD;AAoOH;AAAA,C,CAGD;;AACA,MAAM6E,kBAAkB,GAAG,CAACnD,QAAD,EAAWoD,QAAX,KAAwB;AAEhD,SAAO;AACLnE,IAAAA,mBAAmB,EAAI,CAACoE,IAAD,EAAQ/E,KAAR,KAAqB0B,QAAQ,CAAClC,MAAM,CAACkB,uBAAP,CAA+BqE,IAA/B,EAAqC/E,KAArC,CAAD,CAD/C;AAELQ,IAAAA,YAAY,EAAW,CAACuE,IAAD,EAAQ/E,KAAR,KAAqB0B,QAAQ,CAAClC,MAAM,CAACe,gBAAP,CAAwBwE,IAAxB,EAA+B/E,KAA/B,CAAD;AAF/C,GAAP;AAMF,CARD;;AAaA,MAAMgF,eAAe,GAAG,CAACtC,KAAD,EAAQoC,QAAR,KAAqB;AAC1C,SAAO;AACJX,IAAAA,QAAQ,EAAGzB,KAAK,CAAC0B,QAAN,CAAeD;AADtB,GAAP;AAIF,CALD;;AAOA,MAAMc,WAAW,GAAG1F,OAAO,CAAED,OAAO,CAAC0F,eAAD,EAAkBH,kBAAlB,CAAT,EAA+CjF,kBAA/C,CAA3B;AAGA,eAAgBqF,WAAhB","sourcesContent":["import React from 'react';\n\n//import {DefaultWrongPage} from \"components/partial_components\"\nimport Axios from 'axios_instance';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport  * as action  from 'actions/actionCreators';\n\nimport { store } from 'index';\nimport Api from 'api';\n//import Helper from 'containers/utils/helpers';\n\n\n//const helper   = new Helper();\nconst api = new Api();\n\n\n\n\n\nexport function withAuthentication(Component) {\n\n    return class Authentication extends React.Component {\n\n        constructor(props) {\n            super(props);\n            this.state = {\n            isAuthenticated : false,\n            };\n\n            this.onSubmit            = this.onSubmit.bind(this);\n            this.responseFacebook    = this.responseFacebook.bind(this);\n            this.responseTwitter     = this.responseTwitter.bind(this);\n            this.responseGoogle      = this.responseGoogle.bind(this);     \n        }\n\n\n        isAuthenticated() {\n            let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n            console.log(cachedEntyties)\n\n            if (cachedEntyties){\n                let { auth }  = cachedEntyties;\n\n                if (auth && auth.isLoggedIn){\n                    this.props.history.push('/')\n\n                    this.props.forceUpdate()\n                    return true\n                }\n            }\n\n            return false;\n        }\n\n        Redirect(){\n            let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n            if (cachedEntyties){\n\n                let { auth }  = cachedEntyties;\n                //store.dispatch(getCurrentUser(auth.tokenKey));\n\n                let {currentUser} = cachedEntyties;\n\n                if(!currentUser){\n                   // store.dispatch(getCurrentUser(auth.tokenKey));\n                   console.log(auth)\n\n                }\n\n                if (auth && auth.isLoggedIn){\n                    this.props.history.push('/')\n                }\n            }\n        };\n\n        responseFacebook(response) {\n           //console.log(response.accessToken);\n           var accessToken =  response.accessToken\n           var formData = new FormData();\n           console.log(accessToken)\n          \n           formData.append(\"access_token\",accessToken);\n      \n           //var apiUrl =  api.facebookLoginApi(this)\n\n        };\n\n\n        onStoreUpdate = () =>{\n         \n        };\n\n\n        componentDidUpdate(nextProps , prevState){\n            console.log(nextProps, prevState)\n       };\n\n\n        componentDidMount() {\n            const onStoreChange = () => {\n                let  onStoreUpdate = store.getState();   \n                var userAuth = onStoreUpdate.entyties.userAuth;\n                console.log(userAuth, onStoreUpdate)\n\n                if(userAuth && userAuth.auth && userAuth.auth.isLoggedIn){\n                   //console.log(userAuth.auth)\n                   this.Redirect();\n                }\n            };\n\n            this.unsubscribe = store.subscribe(onStoreChange);\n                    \n        };\n\n\n        componentWillUnmount() {\n            this.unsubscribe();\n\n        };\n\n\n        componentWillReceiveProps(nextProps){\n            console.log(nextProps)\n            /*\n            let  userAuth = store.getState().userAuth;\n            let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n            console.log(cachedEntyties, userAuth)\n\n            let { currentUser }  = cachedEntyties;\n\n            if (userAuth.auth.isLoggedIn && !currentUser) {\n            let isOnStorage = localStorage.getItem('auth' )?true : false;\n\n            if (isOnStorage) {\n               let auth = JSON.parse(localStorage.getItem('auth'))\n               store.dispatch(getCurrentUser(auth.tokenKey));\n               currentUser = localStorage.getItem('currentUser')?true:false;\n\n                if (currentUser) {\n                    setTimeout( () => {\n                     this.props.history.push('/');\n                     this.setState({isAuthenticated:currentUser })\n                  }, 100);\n                    }\n                }\n            }    */   \n        };\n\n        responseTwitter = (response) => {\n            console.log(response);\n            //var accessToken =  response.accessToken\n            //var apiUrl =  api.twitterLoginApi(this)\n           //this.socialLogin(apiUrl, accessToken)\n        }\n\n\n        responseGoogle = (response)=> {\n           console.log(response);\n           //var accessToken =  response.accessToken\n           //var apiUrl =  api.googleLoginApi(this)\n           //this.socialLogin(apiUrl, accessToken)\n        };\n\n        toggleSignUpForm = (props)=>{\n           console.log(props)\n           console.log(props, this.props)\n           this.props.toggleSignUp(props)\n           this.forceUpdate()\n        }\n\n        togglePasswordResetForm = (props)=>{\n           console.log(props, this.props)\n           this.props.togglePasswordReset(props)\n           this.forceUpdate()\n        };\n      \n      \n        getAuthUrl = (formValues)=>{\n        \t\n       \t    if (formValues.email && formValues.password &&\n                !formValues.password2 && !formValues.first_name){\n\n       \t\t    return api.logginUser();\n       \t    }\n        \t\n       \t    else if (formValues.first_name && formValues.last_name){\n       \t\t    return api.createUser();\n       \t    }\n\n       \t    else if (formValues.password2 && formValues.password1){\n       \t\t    return api.passwordChangeApi();\n       \t    } \n        \t\n       \t    else{\n                return  api.passwordResetApi();\n    \t    }\n        };\n\n        onSubmit = (values, dispatch) => {\n            const axiosApi = new Axios(false);\n            let apiUrl =  this.getAuthUrl(values);\n                \n            const instance = axiosApi.axiosInstance();\n            store.dispatch(action.authenticationPending()) \n            alert(instance)\n         \n            return  instance.post(apiUrl, values)\n                .then(response => dispatch(action.authenticationSuccess(response.data)))\n                .catch(error =>{\n                \n                if (error.response && error.response.data) {\n                    dispatch(action.authenticationError(error.response.data));\n                }\n                else if (error.request) {\n                    alert(apiUrl)\n                    dispatch(action.handleError())\n                }\n            }); \n        }\n      \n        getProps() {\n            let  props = {\n                onSubmit : this.onSubmit, \n                responseFacebook        : this.responseFacebook,\n                responseGoogle          : this.responseGoogle,\n                responseTwitter         : this.responseTwitter,\n                togglePasswordResetForm : this.togglePasswordResetForm, \n                toggleSignUpForm        : this.toggleSignUpForm,\n            };\n         \n            return Object.assign(props, this.props);\n        }\n    \n\n        render() {\n            let props = this.getProps(); \n            console.log(props)\n\n            return (\n               <div>\n                    <div>\n                     <Component {...props}/>\n                  </div>  \n                </div>\n            );\n        };\n    };\n};\n\n\n//binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => {\n     \n   return {\n     togglePasswordReset  : (self , props)    => dispatch(action.togglePasswordResetForm(self, props)),\n     toggleSignUp         : (self , props)    => dispatch(action.toggleSignUpForm(self , props)),\n     \n   }\n\n};\n\n\n\n\nconst mapStateToProps = (state, ownProps) => {\n   return {\n      userAuth : state.entyties.userAuth,\n      \n   }\n};\n\nconst composedHoc = compose( connect(mapStateToProps, mapDispatchToProps),withAuthentication )\n\n\nexport default  composedHoc;\n  \n\n\n"]},"metadata":{},"sourceType":"module"}