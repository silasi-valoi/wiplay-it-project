{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/question/question_page.js\";\nimport React, { Component } from 'react';\nimport * as action from 'actions/actionCreators';\nimport { getQuestion } from 'dispatch/index';\nimport { PartalNavigationBar, NavigationBarBigScreen } from \"components/navBar\";\nimport AjaxLoader from \"components/ajax-loader\";\nimport { QuestionComponent } from \"components/question_components\";\nimport { store } from \"index\";\nimport AnswersBox from \"containers/answer/answer_page\";\nimport withHigherOrderIndexBox from \"containers/index/higher_order_index\";\n\nclass QuestionPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isQuestionBox: true,\n      pageName: \"Question\",\n      questionById: ''\n    };\n  }\n\n  componentWillUnmount() {}\n\n  componentDidUpdate(nextProps, prevState) {\n    console.log(nextProps);\n    var questionById = this.state.questionById;\n    var questionEntytie = nextProps.entyties.question;\n    questionEntytie = questionEntytie.byId[questionById];\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n\n    if (this.props.location.state) {\n      let _this$props$location$ = this.props.location.state,\n          isNewQuestion = _this$props$location$.isNewQuestion,\n          question = _this$props$location$.question;\n      var questionById = \"question\".concat(question.id);\n      this.setState({\n        questionById\n      });\n\n      if (isNewQuestion) {\n        store.dispatch(action.getQuestionSuccess(question));\n        store.dispatch(action.Redirected());\n        return;\n      }\n\n      var questionEntytie = this.props.entyties.question;\n      questionEntytie = questionEntytie.byId[questionById];\n\n      if (!questionEntytie) {\n        store.dispatch(getQuestion(question.id));\n      }\n    }\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  getProps() {\n    //Collect all state data and props.\n    let props = {\n      isQuestionBox: this.state.isQuestionBox,\n      pageName: this.state.pageName,\n      questionById: this.state.questionById\n    };\n    return Object.assign(props, this.props);\n  }\n\n  render() {\n    let props = this.getProps();\n    var questionById = props.questionById;\n    var question = props.entyties.question;\n    question = question.byId[questionById];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(PartalNavigationBar, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(NavigationBarBigScreen, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), question ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, question.isLoading ? React.createElement(\"div\", {\n      className: \"page-spin-loader-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(AjaxLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })) : React.createElement(Questions, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))) : \"\");\n  }\n\n}\n\n;\nexport default withHigherOrderIndexBox(QuestionPage);\nexport const Questions = props => {\n  var questionById = props.questionById;\n  var questionEntytie = props.entyties.question;\n  questionEntytie = questionEntytie.byId[questionById];\n  var question = questionEntytie.question;\n  let questionProps = {\n    question\n  };\n  Object.assign(questionProps, props);\n  return React.createElement(\"div\", {\n    className: \"question-page\",\n    id: \"question-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(QuestionComponent, Object.assign({}, questionProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), question.answers ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"number-answers-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, question.answer_count > 1 ? React.createElement(\"p\", {\n    className: \"items-count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, question.answer_count, \"  Answers\") : React.createElement(\"p\", {\n    className: \"items-count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, question.answer_count, \" Answer\")), React.createElement(AnswersBox, Object.assign({}, questionProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }))) : React.createElement(\"p\", {\n    className: \"items-count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"No answer yet\")));\n};","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/question/question_page.js"],"names":["React","Component","action","getQuestion","PartalNavigationBar","NavigationBarBigScreen","AjaxLoader","QuestionComponent","store","AnswersBox","withHigherOrderIndexBox","QuestionPage","constructor","props","state","isQuestionBox","pageName","questionById","componentWillUnmount","componentDidUpdate","nextProps","prevState","console","log","questionEntytie","entyties","question","byId","componentDidMount","location","isNewQuestion","id","setState","dispatch","getQuestionSuccess","Redirected","componentDidCatch","error","info","getProps","Object","assign","render","isLoading","Questions","questionProps","answers","answer_count"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport  * as action  from 'actions/actionCreators';\nimport { getQuestion } from 'dispatch/index';\nimport {PartalNavigationBar,NavigationBarBigScreen } from \"components/navBar\";\nimport  AjaxLoader from \"components/ajax-loader\";\nimport { QuestionComponent} from \"components/question_components\"\nimport {store} from \"index\";\nimport AnswersBox from \"containers/answer/answer_page\";\n\nimport withHigherOrderIndexBox from \"containers/index/higher_order_index\";\n\n\n \n\n\nclass QuestionPage extends Component {\n\n   constructor(props) {\n      super(props);\n\n         this.state = {\n            isQuestionBox : true, \n            pageName      : \"Question\", \n            questionById  : ''\n         };\n\n      };\n  \n   componentWillUnmount() {\n   }\n\n\n   componentDidUpdate(nextProps, prevState) {\n     console.log(nextProps)\n     var questionById = this.state.questionById;\n     var questionEntytie = nextProps.entyties.question;\n\n     questionEntytie = questionEntytie.byId[questionById];\n\n   }    \n\n\n    componentDidMount() {\n        console.log(this.props)\n        \n        if (this.props.location.state) {\n\n            let { isNewQuestion, question } = this.props.location.state;\n            var questionById = `question${question.id}`;\n            this.setState({questionById})\n\n            if (isNewQuestion) {\n                store.dispatch(action.getQuestionSuccess(question))\n                store.dispatch(action.Redirected());\n                return ;\n            }\n      \n            var questionEntytie = this.props.entyties.question;\n            questionEntytie = questionEntytie.byId[questionById]\n\n            if (!questionEntytie) {\n                store.dispatch(getQuestion(question.id));\n            }\n        }\n      \n    };\n   \n\n   \n   componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n    \n   getProps(){\n      //Collect all state data and props.\n      let props = {\n         isQuestionBox     : this.state.isQuestionBox,\n         pageName          : this.state.pageName,\n         questionById      : this.state.questionById\n    \n      };\n      return Object.assign(props, this.props );  \n     \n   };\n\n   render() {\n        let props = this.getProps();\n        var questionById = props.questionById;\n        var question = props.entyties.question;\n        question = question.byId[questionById]\n\n                 \n        return (\n\n            <div>\n                <PartalNavigationBar {...props}/>\n                <NavigationBarBigScreen {...props} />\n\n                { question?\n\n                    <div>\n                        { question.isLoading?\n                            <div className=\"page-spin-loader-box\">\n                                <AjaxLoader/>\n                            </div>\n\n                            :\n                            <Questions {...props}/>\n                        } \n                    </div>\n\n                    :\n                   \"\"  \n                }           \n            </div>\n        );\n    };\n};\n\n\nexport default  withHigherOrderIndexBox(QuestionPage);\n\n\n\n\n\n\n\n\n\n\n\nexport const Questions = props => {\n   var questionById = props.questionById;\n   var questionEntytie = props.entyties.question;\n   questionEntytie = questionEntytie.byId[questionById]\n   var question =questionEntytie.question\n   let questionProps = { question};\n   Object.assign(questionProps, props) \n\n   \n   return (\n      <div className=\"question-page\" id=\"question-page\">\n         <div>\n            <QuestionComponent {...questionProps}/>\n\n            { question.answers?\n                <div>\n                <div className=\"number-answers-box\">\n                    { question.answer_count > 1? \n                        <p className=\"items-count\">{question.answer_count }  Answers</p>\n                        :\n                        <p className=\"items-count\">{ question.answer_count } Answer</p>\n                    }\n                </div>\n\n                \n                <AnswersBox {...questionProps}/>\n                </div>\n               :\n               <p className=\"items-count\">No answer yet</p>\n            }\n         </div>\n      </div>\n   );\n   \n};\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}