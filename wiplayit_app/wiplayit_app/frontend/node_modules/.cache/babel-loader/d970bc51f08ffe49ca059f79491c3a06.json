{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/index/higher_order_index.js\";\nimport React from 'react';\nimport { ModalManager } from 'react-dynamic-modal';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { handleSubmit, getCurrentUser, getPost, getUserList, getUserProfile, getPostList, getQuestion, getReplyList, getReplyChildrenList, getQuestionList as _getQuestionList, getCommentList, getIndex } from \"dispatch/index\";\nimport * as action from 'actions/actionCreators';\nimport { ModalOptionsMenu } from \"components/buttons\";\nimport { DropImage } from \"containers/profile/edit_profile\";\nimport AppEditor from 'containers/editor';\nimport { store } from \"index\";\nimport Modals from \"containers/modal-conf\";\nimport Helper from 'containers/utils/helpers';\nconst helper = new Helper();\nexport function withHigherOrderIndexBox(Component) {\n  var _temp;\n\n  return _temp = class HigherOrderIndexBox extends Component {\n    constructor(_props) {\n      super(_props);\n\n      this.onStoreUpdate = () => {\n        const onStoreChange = () => {\n          let storeUpdate = store.getState(); //if (!storeUpdate.question.visited && storeUpdate.question.newObject) {\n          //   console.log('redirecting to question page')\n          // this.redirecToQuestionPage(storeUpdate.question) \n          // }\n          //Open the Modal whenever modal is true.\n\n          this.openModal(storeUpdate.modal);\n          /*\n           if (this.state.modalIsOpen) {\n              if (this.state.modalIsOpen) {\n                  store.dispatch(action.hideModal())\n              }\n          }\n           else if (this.props.history && this.props.history.action === \"PUSH\") {\n              //console.log(storeUpdate)\n          }*/\n        };\n\n        this.unsubscribe = store.subscribe(onStoreChange);\n      };\n\n      this.logout = () => {\n        localStorage.removeItem('@@CachedEntyties');\n\n        if (this.isAuthenticated()) {\n          localStorage.removeItem('@@CachedEntyties');\n          this.props.history.push('/user/registration');\n        } else {\n          localStorage.removeItem('@@CachedEntyties');\n          this.props.history.push('/user/registration');\n        }\n\n        ModalManager.close();\n      };\n\n      this.openModal = modal => {\n        //Open modal is open is true and close the if isOpen is false\n        //And most importantly render the modal with its contents based on the \n        //action dispatched \n        const modals = new Modals();\n\n        if (modal.isOpen) {\n          let modalProps = modal.modalProps ? modal.modalProps : {}; //Get Some important props and merge them with modalProps\n\n          let props = this.getProps();\n          Object.assign(props, modalProps);\n          console.log(modal);\n\n          if (modal.modalType === 'editor') {\n            modalProps['modalContents'] = React.createElement(AppEditor, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171\n              },\n              __self: this\n            }));\n            console.log(modal, modalProps);\n            modals.editorModal(modal.modalProps);\n            setTimeout(() => {\n              this.setState({\n                modalIsOpen: true\n              }); //this.props.history.push({},'')\n            }, 10);\n          } else if (modal.modalType === 'optionsMenu') {\n            modalProps['modalContents'] = React.createElement(ModalOptionsMenu, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 181\n              },\n              __self: this\n            }));\n            modals.optionsMenuModal(modalProps);\n            setTimeout(() => {\n              this.setState({\n                modalIsOpen: true\n              }); //this.props.history.push({},'')\n            }, 10);\n          } else if (modal.modalType === 'dropImage') {\n            modalProps['modalContents'] = React.createElement(DropImage, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 191\n              },\n              __self: this\n            }));\n            modals.dropImageModal(modalProps);\n            setTimeout(() => {\n              this.setState({\n                modalIsOpen: true\n              }); //this.props.history.push({},'')\n            }, 10);\n          }\n        } else {\n          this.setState({\n            modalIsOpen: false\n          });\n          ModalManager.close();\n        }\n      };\n\n      this.redirecToQuestionPage = questionObj => {\n        questionObj = questionObj.newObject;\n\n        if (questionObj) {\n          let path = \"/question/\".concat(questionObj.slug, \"/\");\n          let currentUser = this.state.currentUser;\n          this.props.history.push(path, {\n            questionObj,\n            currentUser,\n            isNeQuestion: true\n          });\n        }\n      };\n\n      this.state = {\n        currentUser: '',\n        isAuthenticated: localStorage.getItem('auth') ? true : false,\n        modalIsOpen: false\n      };\n    }\n\n    isAuthenticated() {\n      let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n      if (cachedEntyties) {\n        let auth = cachedEntyties.auth;\n\n        if (auth && auth.isLoggedIn) {\n          return true;\n        }\n      }\n\n      return false;\n    } //static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    // return  dispatch => action.handleError(error);\n    //}\n    //componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    // console.log(error, info);\n    // }\n\n    /*\n    componentWillMount() {\n      //localStorage.removeItem('questionList');        \n    }*/\n\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    disableBack(e) {\n      if (this.state.modalIsOpen) {\n        e.returnValue = '';\n      }\n\n      e.preventDefault();\n    }\n\n    componentDidMount() {\n      this.onStoreUpdate(); //Subscribe on store change    \n\n      if (!this.isAuthenticated()) {\n        //User is not authenticated,so redirect to authentication page.\n        this.props.history.push('/user/registration/');\n      }\n\n      if (!this.getCurrentUser()) {\n        store.dispatch(getCurrentUser());\n      }\n    }\n\n    getCurrentUser() {\n      let cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n      if (cachedEntyties && cachedEntyties.currentUser) {\n        return cachedEntyties.currentUser.user;\n      }\n\n      return null;\n    }\n\n    unfollowOrDownVote(params) {\n      if (params.objName === \"question\" || params.objName === \"userProfile\" || params.objName === \"usersList\") {\n        var followers = params.obj.followers - 1;\n        params['formData'] = helper.createFormData({\n          followers\n        });\n      } else {\n        var upvotes = params.obj.upvotes - 1;\n        params['formData'] = helper.createFormData({\n          upvotes\n        });\n      }\n\n      this.props.submit(params); //handle subimiting downVotes or Unfollwers \n    }\n\n    followOrUpVote(params) {\n      if (params.objName === \"question\" || params.objName === \"userProfile\" || params.objName === \"usersList\") {\n        var followers = params.obj.followers + 1;\n        params['formData'] = helper.createFormData({\n          followers\n        });\n      } else {\n        var upvotes = params.obj.upvotes + 1;\n        params['formData'] = helper.createFormData({\n          upvotes\n        });\n      }\n\n      this.props.submit(params); //handle subimiting upvotes or follwers \n    }\n\n    push() {\n      this.props.history.pus(this.props, 'hello');\n    }\n\n    getProps() {\n      let props = {\n        logout: this.logout,\n        followOrUpVote: this.followOrUpVote.bind(this),\n        unfollowOrDownVote: this.unfollowOrDownVote.bind(this),\n        currentUser: this.getCurrentUser()\n      };\n      Object.assign(props, this.props);\n      return props;\n    }\n\n    render() {\n      let props = this.getProps();\n      console.log(props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      })));\n    }\n\n  }, _temp;\n} //binds on `props` change\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    getIndex: () => dispatch(getIndex()),\n    getUserProfile: id => dispatch(getUserProfile(id)),\n    getUserList: props => dispatch(getUserList(props)),\n    getQuestionList: id => dispatch(_getQuestionList(id)),\n    getPostList: id => dispatch(getPostList(id)),\n    getQuestion: id => dispatch(getQuestion(id)),\n    getPost: id => dispatch(getPost(id)),\n    getCommentList: comment => dispatch(getCommentList(comment)),\n    getReplyList: props => dispatch(getReplyList(props)),\n    getReplyChildrenList: reply => dispatch(getReplyChildrenList(reply)),\n    getCurrentUser: apiUrl => dispatch(getCurrentUser()),\n    submit: props => dispatch(handleSubmit(props)),\n    showModal: props => dispatch(action.showModal(props)),\n    hideModal: props => dispatch(action.hideModal(props))\n  };\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    modal: state.modal,\n    entyties: state.entyties\n  };\n};\n\nconst composedHoc = compose(connect(mapStateToProps, mapDispatchToProps), HigherOrderIndexBox);\nexport default composedHoc;","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/index/higher_order_index.js"],"names":["React","ModalManager","connect","compose","handleSubmit","getCurrentUser","getPost","getUserList","getUserProfile","getPostList","getQuestion","getReplyList","getReplyChildrenList","getQuestionList","_getQuestionList","getCommentList","getIndex","action","ModalOptionsMenu","DropImage","AppEditor","store","Modals","Helper","helper","withHigherOrderIndexBox","Component","HigherOrderIndexBox","constructor","props","onStoreUpdate","onStoreChange","storeUpdate","getState","openModal","modal","unsubscribe","subscribe","logout","localStorage","removeItem","isAuthenticated","history","push","close","modals","isOpen","modalProps","getProps","Object","assign","console","log","modalType","editorModal","setTimeout","setState","modalIsOpen","optionsMenuModal","dropImageModal","redirecToQuestionPage","questionObj","newObject","path","slug","currentUser","state","isNeQuestion","getItem","cachedEntyties","JSON","parse","auth","isLoggedIn","componentWillUnmount","disableBack","e","returnValue","preventDefault","componentDidMount","dispatch","user","unfollowOrDownVote","params","objName","followers","obj","createFormData","upvotes","submit","followOrUpVote","pus","bind","render","mapDispatchToProps","ownProps","id","comment","reply","apiUrl","showModal","hideModal","mapStateToProps","entyties","composedHoc"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { ModalManager} from 'react-dynamic-modal';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport {handleSubmit, getCurrentUser,getPost, getUserList,\n         getUserProfile,getPostList,getQuestion,getReplyList,getReplyChildrenList,\n         getQuestionList as _getQuestionList,getCommentList, getIndex }  from \"dispatch/index\"\nimport  * as action  from 'actions/actionCreators';\n\n\nimport { ModalOptionsMenu } from \"components/buttons\";\nimport { DropImage } from \"containers/profile/edit_profile\";\nimport AppEditor  from 'containers/editor'\nimport {store} from \"index\";\n\n\nimport Modals from \"containers/modal-conf\";\nimport Helper from 'containers/utils/helpers';\n\n\n\n\nconst helper   = new Helper();\n\n\nexport function withHigherOrderIndexBox(Component) {\n\n   return class HigherOrderIndexBox extends Component {\n\n      constructor(props) {\n         super(props);\n\n         this.state = {\n            currentUser      : '',\n            isAuthenticated  :  localStorage.getItem('auth' )?true : false,\n            modalIsOpen      : false,\n         };\n          \n      }\n\n\n      isAuthenticated() {\n      \tlet cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n        \n        if (cachedEntyties){\n        \tlet { auth  }  = cachedEntyties;\n        \tif ( auth && auth.isLoggedIn){\n        \t\treturn true\n                \n        \t}\n        }\n\n        return false;\n      }\n\n      //static getDerivedStateFromError(error) {\n         // Update state so the next render will show the fallback UI.\n        // return  dispatch => action.handleError(error);\n      //}\n\n      \n      //componentDidCatch(error, info) {\n         // You can also log the error to an error reporting service\n        // console.log(error, info);\n     // }\n      /*\n      componentWillMount() {\n        //localStorage.removeItem('questionList');        \n      }*/\n\n        componentWillUnmount() {\n            this.unsubscribe();\n        };\n\n        onStoreUpdate = () =>{\n \n            const onStoreChange = () => {\n                let storeUpdate = store.getState();\n                //if (!storeUpdate.question.visited && storeUpdate.question.newObject) {\n                //   console.log('redirecting to question page')\n                // this.redirecToQuestionPage(storeUpdate.question) \n                // }\n               //Open the Modal whenever modal is true.\n\n            this.openModal(storeUpdate.modal);\n            /*\n\n            if (this.state.modalIsOpen) {\n                if (this.state.modalIsOpen) {\n                    store.dispatch(action.hideModal())\n                }\n            }\n\n            else if (this.props.history && this.props.history.action === \"PUSH\") {\n                //console.log(storeUpdate)\n            }*/\n         }\n\n         this.unsubscribe = store.subscribe(onStoreChange);\n\n      }\n\n        \n      \n\n        disableBack(e) {\n            if (this.state.modalIsOpen) {\n                e.returnValue = '';\n            }\n\n            e.preventDefault()\n        }\n\n        componentDidMount() {\n           this.onStoreUpdate() //Subscribe on store change    \n      \n        if (!this.isAuthenticated()) {\n            //User is not authenticated,so redirect to authentication page.\n            this.props.history.push('/user/registration/')\n        }\n\n        if(!this.getCurrentUser()){\n        \tstore.dispatch(getCurrentUser());\n        }\n      };\n\n\n    logout = () => {\n         \n        localStorage.removeItem('@@CachedEntyties')\n\n        if (this.isAuthenticated()) {\n            localStorage.removeItem('@@CachedEntyties')\n            this.props.history.push('/user/registration')\n        }else{\n        \tlocalStorage.removeItem('@@CachedEntyties')\n            this.props.history.push('/user/registration')\n\n        }\n\n        ModalManager.close();\n    }\n\n    getCurrentUser(){\n      \tlet cachedEntyties = JSON.parse(localStorage.getItem('@@CachedEntyties'));\n\n      \tif (cachedEntyties && cachedEntyties.currentUser) {\n      \t   return cachedEntyties.currentUser.user\n        }\n\n        return null;  \n      }\n\n\n\n    openModal = (modal) => {\n         //Open modal is open is true and close the if isOpen is false\n         //And most importantly render the modal with its contents based on the \n         //action dispatched \n         const modals   = new Modals();\n         if (modal.isOpen) {\n            let modalProps = modal.modalProps?modal.modalProps:{};\n            //Get Some important props and merge them with modalProps\n            let props = this.getProps()  \n            Object.assign(props, modalProps)\n\n            console.log(modal)\n\n            if (modal.modalType === 'editor') {\n               modalProps['modalContents'] =  <AppEditor {...props}/>;\n               console.log(modal, modalProps)\n               modals.editorModal(modal.modalProps);\n               setTimeout( () => {\n                   this.setState({modalIsOpen : true})\n                   //this.props.history.push({},'')\n               }, 10);\n               \n            }\n            else if(modal.modalType === 'optionsMenu'){\n               modalProps['modalContents'] = <ModalOptionsMenu {...props}/>\n               modals.optionsMenuModal(modalProps)\n\n               setTimeout( () => {\n                   this.setState({modalIsOpen : true})\n                   //this.props.history.push({},'')\n               }, 10);\n              \n            }\n            else if(modal.modalType === 'dropImage'){\n               modalProps['modalContents'] = <DropImage {...props}/>\n               modals.dropImageModal(modalProps)\n\n               setTimeout( () => {\n                   this.setState({modalIsOpen : true})\n                  //this.props.history.push({},'')\n               }, 10);\n            }\n        \n\n         }else{\n            this.setState({modalIsOpen: false})\n            ModalManager.close();\n         }\n      }\n     \n      redirecToQuestionPage  = (questionObj) => {\n         questionObj = questionObj.newObject;\n         if (questionObj) {\n            let path = `/question/${questionObj.slug}/` \n            let currentUser = this.state.currentUser;\n            \n            this.props.history.push(path, {questionObj, currentUser, isNeQuestion:true})\n         }\n      };\n      \n      unfollowOrDownVote(params) {\n        \n         if (params.objName === \"question\" || params.objName === \"userProfile\" \n                                    || params.objName === \"usersList\" ) {\n            var followers     = params.obj.followers - 1;\n\n            params['formData'] = helper.createFormData({ followers });\n         }else{\n            var upvotes       = params.obj.upvotes - 1; \n            params['formData'] = helper.createFormData({upvotes})\n         }\n        this.props.submit(params); //handle subimiting downVotes or Unfollwers \n\n      };\n\n      followOrUpVote(params) {\n      \n         if (params.objName === \"question\" || params.objName === \"userProfile\"\n                                             || params.objName === \"usersList\") {\n            var followers     = params.obj.followers + 1;\n            params['formData'] = helper.createFormData({ followers });\n         }else{\n            var upvotes       = params.obj.upvotes + 1; \n            params['formData'] = helper.createFormData({upvotes})\n         }\n        this.props.submit(params); //handle subimiting upvotes or follwers \n             \n      };\n\n      push(){\n        this.props.history.pus(this.props, 'hello') \n      }\n     \n      getProps(){\n         let props = {\n            logout             : this.logout,\n            followOrUpVote     : this.followOrUpVote.bind(this),\n            unfollowOrDownVote : this.unfollowOrDownVote.bind(this),\n            currentUser        : this.getCurrentUser(),\n         };\n         \n         Object.assign(props, this.props );\n         return props;  \n         \n      }\n  \n\n      render() {\n         let props = this.getProps();\n         console.log(props)\n         return (\n              <div>\n                <Component {...props}/>\n              </div> \n\n            );\n      };\n\n   }\n}\n\n\n//binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => {\n   \n    return {\n    \tgetIndex             : ()        =>  dispatch(getIndex()), \n        getUserProfile       : (id)      => dispatch(getUserProfile(id)),\n        getUserList          : (props)   => dispatch(getUserList(props)),\n        getQuestionList      : (id)      => dispatch(_getQuestionList(id)),\n        getPostList          : (id)      => dispatch(getPostList(id)),\n        getQuestion          : (id)      => dispatch(getQuestion(id)),\n        getPost              : (id)      => dispatch(getPost(id)),\n        getCommentList       : (comment) => dispatch(getCommentList(comment)),\n        getReplyList         : (props)   => dispatch(getReplyList(props)),\n        getReplyChildrenList : (reply)   => dispatch(getReplyChildrenList(reply)),\n        getCurrentUser       : (apiUrl)  => dispatch(getCurrentUser()),\n        submit               : (props )  => dispatch(handleSubmit(props)), \n        showModal            : (props )  => dispatch(action.showModal(props)),\n        hideModal            : (props )  => dispatch(action.hideModal(props)),  \n   }\n\n};\n\n\n\n\nconst mapStateToProps = (state, ownProps) => {\n   \n    return {\n       modal         : state.modal,\n       entyties      : state.entyties,       \n    }\n};\n\nconst composedHoc = compose( connect(mapStateToProps, mapDispatchToProps), HigherOrderIndexBox )\n\n\nexport default  composedHoc;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}