{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/question/question_page.js\";\nimport React, { Component } from 'react';\nimport * as action from 'actions/actionCreators';\nimport { getQuestion } from 'dispatch/index';\nimport { PartalNavigationBar, NavigationBarBigScreen } from \"components/navBar\";\nimport AjaxLoader from \"components/ajax-loader\";\nimport { QuestionComponent } from \"components/question_components\";\nimport { store } from \"index\";\nimport withHigherOrderIndexBox from \"containers/index/higher_order_index\";\n\nclass QuestionPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isQuestionBox: true,\n      pageName: \"Question\",\n      questionById: ''\n    };\n  }\n\n  componentWillUnmount() {}\n\n  componentDidUpdate(nextProps, prevState) {// alert('hi')\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    let _this$props$location$ = this.props.location.state,\n        isNewQuestion = _this$props$location$.isNewQuestion,\n        question = _this$props$location$.question;\n    var questionById = \"question\".concat(question.id);\n    this.setState({\n      questionById\n    });\n\n    if (isNewQuestion) {\n      store.dispatch(action.getQuestionSuccess(question));\n      store.dispatch(action.Redirected());\n      return;\n    }\n\n    var questionEntytie = this.props.entyties.question;\n    questionEntytie = questionEntytie.byId[questionById];\n\n    if (!questionEntytie) {\n      store.dispatch(getQuestion(question.id));\n    }\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  getProps() {\n    //Collect all state data and props.\n    let props = {\n      isQuestionBox: this.state.isQuestionBox,\n      pageName: this.state.pageName,\n      questionById: this.state.questionById\n    };\n    return Object.assign(props, this.props);\n  }\n\n  render() {\n    let props = this.getProps();\n    var questionById = props.questionById;\n    var question = props.entyties.question;\n    question = question.byId[questionById];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(PartalNavigationBar, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(NavigationBarBigScreen, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), question ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, question.isLoading ? React.createElement(\"div\", {\n      className: \"page-spin-loder-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(AjaxLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, question.questionObj ? React.createElement(Questions, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })) : \"\")) : \"\");\n  }\n\n}\n\nexport default withHigherOrderIndexBox(QuestionPage);\nexport const Questions = props => {\n  var questionById = props.questionById;\n  var question = props.entyties.question;\n  question = question.byId[questionById];\n  let questionProps = {\n    questionObj: question.questionObj\n  };\n  Object.assign(questionProps, props);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(QuestionComponent, Object.assign({}, questionProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))));\n};","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/question/question_page.js"],"names":["React","Component","action","getQuestion","PartalNavigationBar","NavigationBarBigScreen","AjaxLoader","QuestionComponent","store","withHigherOrderIndexBox","QuestionPage","constructor","props","state","isQuestionBox","pageName","questionById","componentWillUnmount","componentDidUpdate","nextProps","prevState","componentDidMount","console","log","location","isNewQuestion","question","id","setState","dispatch","getQuestionSuccess","Redirected","questionEntytie","entyties","byId","componentDidCatch","error","info","getProps","Object","assign","render","isLoading","questionObj","Questions","questionProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport  * as action  from 'actions/actionCreators';\nimport { getQuestion } from 'dispatch/index';\nimport {PartalNavigationBar,NavigationBarBigScreen } from \"components/navBar\";\nimport  AjaxLoader from \"components/ajax-loader\";\nimport { QuestionComponent} from \"components/question_components\"\nimport {store} from \"index\";\n\nimport withHigherOrderIndexBox from \"containers/index/higher_order_index\";\n\n\n \n\n\nclass QuestionPage extends Component {\n\n   constructor(props) {\n      super(props);\n\n         this.state = {\n            isQuestionBox : true, \n            pageName      : \"Question\", \n            questionById  : ''\n         };\n\n      };\n  \n   componentWillUnmount() {\n   }\n\n\n   componentDidUpdate(nextProps, prevState) {\n     // alert('hi')\n   }    \n\n\n   componentDidMount() {\n      console.log(this.props)\n\n      let { isNewQuestion, question } = this.props.location.state;\n      var questionById = `question${question.id}`;\n      this.setState({questionById})\n\n      if (isNewQuestion) {\n         store.dispatch(action.getQuestionSuccess(question))\n         store.dispatch(action.Redirected());\n         return ;\n      }\n      \n      var questionEntytie = this.props.entyties.question;\n      questionEntytie = questionEntytie.byId[questionById]\n\n      if (!questionEntytie) {\n         store.dispatch(getQuestion(question.id));\n      }\n      \n   };\n   \n\n   \n   componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n    \n   getProps(){\n      //Collect all state data and props.\n      let props = {\n         isQuestionBox     : this.state.isQuestionBox,\n         pageName          : this.state.pageName,\n         questionById      : this.state.questionById\n    \n      };\n      return Object.assign(props, this.props );  \n     \n   };\n\n   render() {\n      let props = this.getProps();\n      var questionById = props.questionById;\n      var question = props.entyties.question;\n      question = question.byId[questionById]\n\n                 \n      return (\n\n         <div>\n            <PartalNavigationBar {...props}/>\n            <NavigationBarBigScreen {...props} />\n            { question?\n               <div>\n                  { question.isLoading?\n                     <div className=\"page-spin-loder-box\">\n                        <AjaxLoader/>\n                     </div>\n                     :\n                     <div>\n                        { question.questionObj?\n                           <Questions {...props}/>\n                           :\n                           \"\"\n                        }\n                     </div>\n                  } \n               </div>\n               :\n               \"\"  \n            }           \n         </div>\n\n            \n    );\n  };\n}\n\n\nexport default  withHigherOrderIndexBox(QuestionPage);\n\n\n\n\n\n\n\n\n\n\n\nexport const Questions = props => {\n   var questionById = props.questionById;\n   var question = props.entyties.question;\n   question = question.byId[questionById]\n   let questionProps = { questionObj: question.questionObj };\n   Object.assign(questionProps, props) \n\n   \n   return (\n      <div>\n         <div>\n            <QuestionComponent {...questionProps}/>\n         </div>\n      </div>\n   );\n   \n};\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}