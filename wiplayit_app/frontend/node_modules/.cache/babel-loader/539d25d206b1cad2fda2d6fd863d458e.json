{"ast":null,"code":"var _jsxFileName = \"/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/comment/comment_page.js\";\nimport React, { Component } from 'react';\nimport AjaxLoader from \"components/ajax-loader\";\nimport * as action from 'actions/actionCreators';\nimport { CommentsComponent } from \"components/comment_components\"; //import { UserComponentSmall } from \"components/profile_components\";\n//import withMain  from 'containers/higher-order-components/main';\n\nimport { Editor, EditorState, convertFromRaw } from 'draft-js';\nimport { pageMediaBlockRenderer } from 'components/editor_components';\nimport { store } from \"index\";\n\nclass CommentsBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCommentBox: true,\n      commentById: '',\n      parent: ''\n    };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  componentDidMount() {\n    //let {isPostBox, isAnswerBox,answer,post,isPostListBox, isProfileBox} = this.props;\n    var parent = post ? post : answer;\n    let comments = parent.comments;\n    var commentById = isAnswerBox ? \"commentsAnswer\".concat(parent.id) : \"commentsPost\".concat(parent.id);\n\n    if (comments) {\n      if (comments.length) {\n        this.setState({\n          commentById,\n          parent\n        });\n        store.dispatch(action.getCommentLindData(commentById, comments));\n      }\n    }\n  }\n\n  componentDidUpdate(nextProps, prevState) {}\n\n  getProps() {\n    let props = {\n      isCommentBox: this.state.isCommentBox,\n      parent: this.state.parent,\n      commentById: this.state.commentById\n    };\n    return Object.assign(props, this.props);\n  }\n\n  render() {\n    let props = this.getProps();\n    console.log(props);\n    var comments = props.entyties.comments;\n    console.log(comments);\n    comments = comments.byId[props.commentById];\n    console.log(comments);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, comments ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, comments.showLink ? React.createElement(CommentsLink, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, comments.isLoading ? React.createElement(\"div\", {\n      className: \"spin-loader-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(AjaxLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, props.isAnswerBox ? React.createElement(AnswerComments, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })) : \"\", props.isPostBox || props.isPostListBox ? React.createElement(PostComments, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })) : \"\"))) : \"\");\n  }\n\n}\n\nexport default CommentsBox;\nexport const CommentsLink = props => {\n  var byId = props.commentById;\n  var comments = props.entyties.comments;\n  comments = comments.byId[byId];\n  let styles = {\n    border: \"px solid red\",\n    fontSize: \"11px\",\n    margin: 0,\n    padding: 0,\n    display: 'flex',\n    listStyleType: 'none'\n  };\n  let commentCountStyles = {\n    fontSize: \"11px\",\n    margin: '10px'\n  };\n  console.log(byId);\n  var linkData = comments.linkData;\n  return React.createElement(\"div\", {\n    onClick: () => props.getCommentList(byId),\n    className: \"comments-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Links, Object.assign({}, linkData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  })), React.createElement(\"ul\", {\n    style: styles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    style: commentCountStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Click to View More Comments\"), React.createElement(\"li\", {\n    style: commentCountStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, linkData.numOfComments, \"  Comments\")));\n};\n\nconst AnswerComments = props => {\n  var comments = props.entyties.comments;\n  comments = comments.byId[props.commentById];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, comments.commentList.map((comment, index) => {\n    let commentProps = {\n      comment,\n      index\n    };\n    Object.assign(commentProps, props);\n    return React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, props.answer.id === comment.answer ? React.createElement(\"div\", {\n      className: \"comments-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comment-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(CommentsComponent, Object.assign({}, commentProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })))) : \"\");\n  }));\n};\n\nconst PostComments = props => {\n  var commentById = \"commentsPost\".concat(props.post.id);\n  var comments = props.entyties.comments;\n  comments = comments.byId[commentById];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, comments.commentList.map((comment, index) => {\n    let commentProps = {\n      comment,\n      index\n    };\n    Object.assign(commentProps, props);\n    console.log(commentProps);\n    return React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, props.post.id === comment.post ? React.createElement(\"div\", {\n      className: \"comments-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comment-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(CommentsComponent, Object.assign({}, commentProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })))) : \"\");\n  }));\n};\n\nexport const Links = props => {\n  let storedState = JSON.parse(props.comment.comment);\n  const contentState = convertFromRaw(storedState);\n  const editorState = EditorState.createWithContent(contentState);\n  console.log(props.comment);\n  return React.createElement(\"div\", {\n    className: \"comment-box\",\n    id: \"comment-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"user-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"comment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(Editor, {\n    blockRendererFn: pageMediaBlockRenderer,\n    editorState: editorState,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/home/silasi/Deprojectos/javascript_projects/wiplay-it-web-frontend/src/containers/comment/comment_page.js"],"names":["React","Component","AjaxLoader","action","CommentsComponent","Editor","EditorState","convertFromRaw","pageMediaBlockRenderer","store","CommentsBox","constructor","props","state","isCommentBox","commentById","parent","componentDidCatch","error","info","console","log","componentDidMount","post","answer","comments","isAnswerBox","id","length","setState","dispatch","getCommentLindData","componentDidUpdate","nextProps","prevState","getProps","Object","assign","render","entyties","byId","showLink","isLoading","isPostBox","isPostListBox","CommentsLink","styles","border","fontSize","margin","padding","display","listStyleType","commentCountStyles","linkData","getCommentList","numOfComments","AnswerComments","commentList","map","comment","index","commentProps","PostComments","Links","storedState","JSON","parse","contentState","editorState","createWithContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport  AjaxLoader from \"components/ajax-loader\";\nimport  * as action  from 'actions/actionCreators';\n\nimport {  CommentsComponent } from \"components/comment_components\"\n//import { UserComponentSmall } from \"components/profile_components\";\n//import withMain  from 'containers/higher-order-components/main';\n\nimport {Editor, EditorState, convertFromRaw} from 'draft-js';\nimport {pageMediaBlockRenderer} from 'components/editor_components';\nimport {store} from \"index\";\n\n\n\n\n\n\nclass CommentsBox extends Component {\n\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         isCommentBox  : true,\n         commentById   : '',\n         parent        : '',\n\n      };\n   \n   };\n\n   componentDidCatch(error, info) {\n     // You can also log the error to an error reporting service\n     console.log(error, info);\n   }\n\n   \n\n   componentDidMount() {\n      //let {isPostBox, isAnswerBox,answer,post,isPostListBox, isProfileBox} = this.props;\n      \n      var parent      = post?post:answer;\n      let comments    = parent.comments;\n      var commentById = isAnswerBox?`commentsAnswer${parent.id}`:`commentsPost${parent.id}`;\n                           \n      if (comments) {\n         if (comments.length) {\n            this.setState({commentById, parent});\n            store.dispatch(action.getCommentLindData(commentById, comments));\n         } \n      }\n     \n   }\n\n\n   componentDidUpdate(nextProps, prevState) {\n     \n   } \n   \n       \n   getProps() {\n\n      let props = {\n         isCommentBox    : this.state.isCommentBox,\n         parent       : this.state.parent,\n         commentById  : this.state.commentById,\n      }\n      return Object.assign(props, this.props); \n   }\n\n\n   render() { \n      let props  = this.getProps();\n      console.log(props)\n      var comments    = props.entyties.comments;\n      console.log(comments)\n      comments = comments.byId[props.commentById]\n      console.log(comments)\n      \n      return (\n         <div>\n         {comments?\n            <div>   \n               { comments.showLink?\n                  <CommentsLink {...props}/>\n                  :\n                  <div>\n                     {comments.isLoading?\n                        <div className=\"spin-loader-box\">\n                           <AjaxLoader/>\n                        </div>\n                        :\n                        <div>\n                           {props.isAnswerBox?\n                              <AnswerComments {...props}/>\n                              :\n                              \"\"\n                           }\n                                        \n                           { props.isPostBox || props.isPostListBox?\n                              <PostComments {...props}/>\n                              :\n                              \"\"\n                           }\n                        </div> \n                     }\n                  </div>  \n               }\n            </div>\n            :\n            \"\"\n         }\n         </div>\n\n      )\n   };\n}\n\n\nexport default CommentsBox;\n\n\nexport const CommentsLink = props => {\n   var byId = props.commentById;\n   var comments    = props.entyties.comments;\n   comments = comments.byId[byId]\n   let styles ={\n      border         : \"px solid red\",\n      fontSize       : \"11px\",\n      margin         : 0,\n      padding        : 0,\n      display        : 'flex',\n      listStyleType  : 'none', \n   }\n  \n\n   let commentCountStyles ={\n      fontSize : \"11px\",\n      margin   : '10px',\n   }\n   console.log(byId)\n   var linkData = comments.linkData;\n    return (\n     <div  onClick={ () => props.getCommentList(byId) } className=\"comments-link\">\n        <Links {...linkData}/>\n         <ul style={styles}>\n            <li  style={commentCountStyles}>Click to View More Comments</li>\n            <li  style={commentCountStyles}>\n               {linkData.numOfComments}  Comments\n            </li>\n         </ul>\n     </div>\n   )\n}\n\n\n\n\nconst AnswerComments = props => {\n   \n   var comments    = props.entyties.comments;\n   comments = comments.byId[props.commentById]\n   return (\n      <div >\n        \n         { comments.commentList.map( (comment, index) => {\n            let commentProps = {comment, index};  \n            Object.assign(commentProps, props);\n            return(\n               <div  key={index} >\n                  { props.answer.id === comment.answer?\n                     <div className=\"comments-container\">\n                        <div className=\"comment-contents\">\n                           <CommentsComponent {...commentProps}/>\n                        </div>\n                     </div>  \n\n                     : \"\"\n                  } \n               </div>\n            )\n         })}\n      \n\n   </div>\n\n   );\n}\n\n\n\n\n\n\nconst PostComments = props => {\n   var commentById = `commentsPost${props.post.id}`;\n   var comments    = props.entyties.comments;\n   comments       = comments.byId[commentById]\n   return (\n      <div>\n\n      { comments.commentList.map( (comment, index) => {\n          \n       let commentProps = {comment, index};  \n       Object.assign(commentProps, props)\n       console.log(commentProps)\n\n       return(\n            <div  key={index}>\n               { props.post.id === comment.post?\n                  <div className=\"comments-container\">\n                     <div className=\"comment-contents\">\n                        <CommentsComponent {...commentProps}/>\n                     </div>\n                  </div>  \n\n                  : \"\"\n               } \n            </div>\n         )\n      }\n\n      )}\n\n   </div>\n\n   );\n}\n\n\n\n\nexport const Links = props => {\n   let storedState = JSON.parse(props.comment.comment)\n   const contentState = convertFromRaw(storedState);\n   const editorState = EditorState.createWithContent(contentState);\n   console.log(props.comment)\n\n   return (\n      <div  className=\"comment-box\" id=\"comment-box\">\n         <div className=\"user-box\">\n            \n          </div>\n    \n         <div className=\"comment\">\n           <Editor\n             blockRendererFn={pageMediaBlockRenderer}\n             editorState={editorState} \n            readOnly={true} /> \n         </div>\n      </div>\n   )  \n}"]},"metadata":{},"sourceType":"module"}